// This file defines tortuga GRPC interface.
syntax = "proto3";

package tortuga;

option java_package = "io.tortuga";
option java_outer_classname = "TortugaProto";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";

message Worker {
  string worker_id = 1;
  string uuid = 2;

  // name of the tasks that this worker can handle.
  repeated string capabilities = 3;
}

message HeartbeatReq {
  // a connection handling multiple workers will beat for all of them at once
  // hence this is repeated.
  message WorkerBeat {
    Worker worker = 1;

    repeated int64 current_task_handles = 2;
  }

  repeated WorkerBeat worker_beats = 1;
}

message TaskReq {
  Worker worker = 1;
}

message TaskResp {
  string id = 1;
  string type = 2;
  google.protobuf.Any data = 3;
  string handle = 4;
  bool none = 5;

  message RetryContext {
    int32 retries = 1;
    // The last metadata provided, relevant only if retries > 0.
    string progress_metadata = 2;
  }

  RetryContext retry_ctx = 6;
}

message Task {
  string id = 1;
  string type = 2;
  google.protobuf.Any data = 3;
  google.protobuf.Int32Value priority = 4;
  google.protobuf.Int32Value max_retries = 5;

  // If set the task shall not be served before this delay.
  google.protobuf.Duration delay = 6;

  // List of modules that apply to this task.
  // Names MUST correspond to a module supported in the server.
  repeated string modules = 7;
}

message TaskProgress {
  string handle = 1;
  string id = 2;
  string type = 3;

  int32 max_retries = 4;
  int32 retries = 5;
  int32 priority = 6;

  bool worked_on = 7;
  bool done = 8;

  google.protobuf.Timestamp created = 9;
  google.protobuf.Timestamp started_time = 10;
  google.protobuf.Timestamp done_time = 11;

  google.rpc.Status status = 12;

  float progress = 13;
  string progress_message = 14;
  string progress_metadata = 18;
  string logs = 15;

  string worker_id = 16;
  string output = 17;
}

message CreateReq {
  Task task = 1;
}

message CreateResp {
  string handle = 1;
  bool created = 2;
}

message CompleteTaskReq {
  Worker worker = 1;
  string handle = 2;
  int32 code = 3;
  string error_message = 4;
  string logs = 5;

  // arbitrary text that may be saved along with the task.
  string output = 6;
}

message UpdateProgressReq {
  Worker worker = 1;
  string handle = 2;

  google.protobuf.FloatValue progress = 3;
  google.protobuf.StringValue progress_message = 4;
  google.protobuf.StringValue progress_metadata = 5;
}

message ProgressReq {
  // Handle of the task of which to subscribe for.
  string handle = 1;
}

message ProgressResp {
  // handle of the task that is done.
  string handle = 1;
  // How it ended...
  google.rpc.Status status = 2;
}

message TaskIdentifier {
  string id = 1;
  string type = 2;
}

message FindTaskReq {
  int64 handle = 1;
  bool is_for_done_only = 2;
}

service Tortuga {
  rpc CreateTask(CreateReq) returns (CreateResp);
  rpc RequestTask(TaskReq) returns (TaskResp);
  rpc Heartbeat(HeartbeatReq) returns (google.protobuf.Empty);
  rpc CompleteTask(CompleteTaskReq) returns (google.protobuf.Empty);
  rpc UpdateProgress(UpdateProgressReq) returns (google.protobuf.Empty);

  // Finds a task by id and type.
  rpc FindTask(TaskIdentifier) returns (TaskProgress);
  // Finds a task by specific handle.
  rpc FindTaskByHandle(FindTaskReq) returns (TaskProgress);

  // admin commands (for now these are for tests)
  rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
  rpc QuitQuitQuit(google.protobuf.Empty) returns (google.protobuf.Empty);
}
