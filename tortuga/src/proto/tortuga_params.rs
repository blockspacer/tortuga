// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TortugaBridgeOpts {
    // message fields
    timeout_seconds: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TortugaBridgeOpts {
    pub fn new() -> TortugaBridgeOpts {
        ::std::default::Default::default()
    }

    // optional int32 timeout_seconds = 1;

    pub fn clear_timeout_seconds(&mut self) {
        self.timeout_seconds = ::std::option::Option::None;
    }

    pub fn has_timeout_seconds(&self) -> bool {
        self.timeout_seconds.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout_seconds(&mut self, v: i32) {
        self.timeout_seconds = ::std::option::Option::Some(v);
    }

    pub fn get_timeout_seconds(&self) -> i32 {
        self.timeout_seconds.unwrap_or(0)
    }
}

impl ::protobuf::Message for TortugaBridgeOpts {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.timeout_seconds = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.timeout_seconds {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.timeout_seconds {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TortugaBridgeOpts {
        TortugaBridgeOpts::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "timeout_seconds",
                    |m: &TortugaBridgeOpts| { &m.timeout_seconds },
                    |m: &mut TortugaBridgeOpts| { &mut m.timeout_seconds },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TortugaBridgeOpts>(
                    "TortugaBridgeOpts",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TortugaBridgeOpts {
        static mut instance: ::protobuf::lazy::Lazy<TortugaBridgeOpts> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TortugaBridgeOpts,
        };
        unsafe {
            instance.get(TortugaBridgeOpts::new)
        }
    }
}

impl ::protobuf::Clear for TortugaBridgeOpts {
    fn clear(&mut self) {
        self.clear_timeout_seconds();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TortugaBridgeOpts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TortugaBridgeOpts {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TortugaOutput {
    // message fields
    output: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TortugaOutput {
    pub fn new() -> TortugaOutput {
        ::std::default::Default::default()
    }

    // optional string output = 1;

    pub fn clear_output(&mut self) {
        self.output.clear();
    }

    pub fn has_output(&self) -> bool {
        self.output.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output(&mut self, v: ::std::string::String) {
        self.output = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output(&mut self) -> &mut ::std::string::String {
        if self.output.is_none() {
            self.output.set_default();
        }
        self.output.as_mut().unwrap()
    }

    // Take field
    pub fn take_output(&mut self) -> ::std::string::String {
        self.output.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_output(&self) -> &str {
        match self.output.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
}

impl ::protobuf::Message for TortugaOutput {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.output)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.output.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.output.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TortugaOutput {
        TortugaOutput::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "output",
                    |m: &TortugaOutput| { &m.output },
                    |m: &mut TortugaOutput| { &mut m.output },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TortugaOutput>(
                    "TortugaOutput",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TortugaOutput {
        static mut instance: ::protobuf::lazy::Lazy<TortugaOutput> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TortugaOutput,
        };
        unsafe {
            instance.get(TortugaOutput::new)
        }
    }
}

impl ::protobuf::Clear for TortugaOutput {
    fn clear(&mut self) {
        self.clear_output();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TortugaOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TortugaOutput {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

pub mod exts {
    use protobuf::Message as Message_imported_for_functions;

    pub const bridge: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MethodOptions, ::protobuf::types::ProtobufTypeMessage<super::TortugaBridgeOpts>> = ::protobuf::ext::ExtFieldOptional { field_number: 50007, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ctortuga/tortuga_params.proto\x12\x07tortuga\x1a\x20google/protobuf\
    /descriptor.proto\"<\n\x11TortugaBridgeOpts\x12'\n\x0ftimeout_seconds\
    \x18\x01\x20\x01(\x05R\x0etimeoutSeconds\"'\n\rTortugaOutput\x12\x16\n\
    \x06output\x18\x01\x20\x01(\tR\x06output:T\n\x06bridge\x18\xd7\x86\x03\
    \x20\x01(\x0b2\x1a.tortuga.TortugaBridgeOpts\x12\x1e.google.protobuf.Met\
    hodOptionsR\x06bridgeB\x20\n\nio.tortugaB\x12TortugaParamsProtoJ\xfb\x05\
    \n\x06\x12\x04\x02\0\x18\x01\ng\n\x01\x0c\x12\x03\x02\0\x12\x1a]\x20This\
    \x20file\x20defines\x20annotations\x20for\x20tortuga\x20services.\n\x20I\
    t\x20is\x20meant\x20to\x20be\x20included\x20by\x20clients.\n\n\x08\n\x01\
    \x02\x12\x03\x04\x08\x0f\n\x08\n\x01\x08\x12\x03\x06\0#\n\x0b\n\x04\x08\
    \xe7\x07\0\x12\x03\x06\0#\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x06\x07\
    \x13\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x06\x07\x13\n\x0e\n\x07\x08\
    \xe7\x07\0\x02\0\x01\x12\x03\x06\x07\x13\n\x0c\n\x05\x08\xe7\x07\0\x07\
    \x12\x03\x06\x16\"\n\x08\n\x01\x08\x12\x03\x07\03\n\x0b\n\x04\x08\xe7\
    \x07\x01\x12\x03\x07\03\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x07\x07\
    \x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x07\x07\x1b\n\x0e\n\x07\x08\
    \xe7\x07\x01\x02\0\x01\x12\x03\x07\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x01\
    \x07\x12\x03\x07\x1e2\n\t\n\x02\x03\0\x12\x03\t\x07)\n\n\n\x02\x04\0\x12\
    \x04\x0b\0\r\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x19\n\x0b\n\x04\x04\
    \0\x02\0\x12\x03\x0c\x02%\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\x0c\x02\n\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x0c\x0b\x10\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x0c\x11\x20\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c#$\n\t\n\
    \x01\x07\x12\x04\x0f\0\x11\x01\n\t\n\x02\x07\0\x12\x03\x10\x02,\n\n\n\
    \x03\x07\0\x02\x12\x03\x0f\x07$\n\n\n\x03\x07\0\x04\x12\x03\x10\x02\n\n\
    \n\n\x03\x07\0\x06\x12\x03\x10\x0b\x1c\n\n\n\x03\x07\0\x01\x12\x03\x10\
    \x1d#\n\n\n\x03\x07\0\x03\x12\x03\x10&+\n\xce\x01\n\x02\x04\x01\x12\x04\
    \x16\0\x18\x01\x1a\xc1\x01\x20This\x20message\x20is\x20to\x20be\x20used\
    \x20by\x20tortuga\x20<>\x20GRPC\x20bridge.\n\x20If\x20and\x20only\x20if\
    \x20the\x20service\x20returns\x20this\x20Type,\x20and\x20'output'\x20is\
    \x20not\x20empty,\x20then\x20the\n\x20tortuga\x20bridge\x20will\x20write\
    \x20this\x20as\x20output\x20of\x20the\x20task.\n\n\n\n\x03\x04\x01\x01\
    \x12\x03\x16\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x17\x02\x1d\n\x0c\
    \n\x05\x04\x01\x02\0\x04\x12\x03\x17\x02\n\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03\x17\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x17\x12\x18\n\
    \x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17\x1b\x1c\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
