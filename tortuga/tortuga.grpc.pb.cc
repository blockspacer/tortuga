// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tortuga/tortuga.proto

#include "tortuga/tortuga.pb.h"
#include "tortuga/tortuga.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tortuga {

static const char* Tortuga_method_names[] = {
  "/tortuga.Tortuga/CreateTask",
  "/tortuga.Tortuga/RequestTask",
  "/tortuga.Tortuga/Heartbeat",
  "/tortuga.Tortuga/CompleteTask",
  "/tortuga.Tortuga/IsDone",
  "/tortuga.Tortuga/Ping",
  "/tortuga.Tortuga/QuitQuitQuit",
};

std::unique_ptr< Tortuga::Stub> Tortuga::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Tortuga::Stub> stub(new Tortuga::Stub(channel));
  return stub;
}

Tortuga::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateTask_(Tortuga_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestTask_(Tortuga_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(Tortuga_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteTask_(Tortuga_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsDone_(Tortuga_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(Tortuga_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuitQuitQuit_(Tortuga_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Tortuga::Stub::CreateTask(::grpc::ClientContext* context, const ::tortuga::CreateReq& request, ::tortuga::CreateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tortuga::CreateResp>* Tortuga::Stub::AsyncCreateTaskRaw(::grpc::ClientContext* context, const ::tortuga::CreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tortuga::CreateResp>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tortuga::CreateResp>* Tortuga::Stub::PrepareAsyncCreateTaskRaw(::grpc::ClientContext* context, const ::tortuga::CreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tortuga::CreateResp>::Create(channel_.get(), cq, rpcmethod_CreateTask_, context, request, false);
}

::grpc::Status Tortuga::Stub::RequestTask(::grpc::ClientContext* context, const ::tortuga::TaskReq& request, ::tortuga::TaskResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::tortuga::TaskResp>* Tortuga::Stub::AsyncRequestTaskRaw(::grpc::ClientContext* context, const ::tortuga::TaskReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tortuga::TaskResp>::Create(channel_.get(), cq, rpcmethod_RequestTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tortuga::TaskResp>* Tortuga::Stub::PrepareAsyncRequestTaskRaw(::grpc::ClientContext* context, const ::tortuga::TaskReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tortuga::TaskResp>::Create(channel_.get(), cq, rpcmethod_RequestTask_, context, request, false);
}

::grpc::Status Tortuga::Stub::Heartbeat(::grpc::ClientContext* context, const ::tortuga::Worker& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::tortuga::Worker& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::PrepareAsyncHeartbeatRaw(::grpc::ClientContext* context, const ::tortuga::Worker& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Heartbeat_, context, request, false);
}

::grpc::Status Tortuga::Stub::CompleteTask(::grpc::ClientContext* context, const ::tortuga::CompleteTaskReq& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CompleteTask_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::AsyncCompleteTaskRaw(::grpc::ClientContext* context, const ::tortuga::CompleteTaskReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CompleteTask_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::PrepareAsyncCompleteTaskRaw(::grpc::ClientContext* context, const ::tortuga::CompleteTaskReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CompleteTask_, context, request, false);
}

::grpc::Status Tortuga::Stub::IsDone(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::google::protobuf::BoolValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsDone_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* Tortuga::Stub::AsyncIsDoneRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::BoolValue>::Create(channel_.get(), cq, rpcmethod_IsDone_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::BoolValue>* Tortuga::Stub::PrepareAsyncIsDoneRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::BoolValue>::Create(channel_.get(), cq, rpcmethod_IsDone_, context, request, false);
}

::grpc::Status Tortuga::Stub::Ping(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, false);
}

::grpc::Status Tortuga::Stub::QuitQuitQuit(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QuitQuitQuit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::AsyncQuitQuitQuitRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_QuitQuitQuit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Tortuga::Stub::PrepareAsyncQuitQuitQuitRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_QuitQuitQuit_, context, request, false);
}

Tortuga::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tortuga_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tortuga::Service, ::tortuga::CreateReq, ::tortuga::CreateResp>(
          std::mem_fn(&Tortuga::Service::CreateTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tortuga_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tortuga::Service, ::tortuga::TaskReq, ::tortuga::TaskResp>(
          std::mem_fn(&Tortuga::Service::RequestTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tortuga_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tortuga::Service, ::tortuga::Worker, ::google::protobuf::Empty>(
          std::mem_fn(&Tortuga::Service::Heartbeat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tortuga_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tortuga::Service, ::tortuga::CompleteTaskReq, ::google::protobuf::Empty>(
          std::mem_fn(&Tortuga::Service::CompleteTask), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tortuga_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tortuga::Service, ::google::protobuf::StringValue, ::google::protobuf::BoolValue>(
          std::mem_fn(&Tortuga::Service::IsDone), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tortuga_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tortuga::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Tortuga::Service::Ping), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Tortuga_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Tortuga::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Tortuga::Service::QuitQuitQuit), this)));
}

Tortuga::Service::~Service() {
}

::grpc::Status Tortuga::Service::CreateTask(::grpc::ServerContext* context, const ::tortuga::CreateReq* request, ::tortuga::CreateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tortuga::Service::RequestTask(::grpc::ServerContext* context, const ::tortuga::TaskReq* request, ::tortuga::TaskResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tortuga::Service::Heartbeat(::grpc::ServerContext* context, const ::tortuga::Worker* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tortuga::Service::CompleteTask(::grpc::ServerContext* context, const ::tortuga::CompleteTaskReq* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tortuga::Service::IsDone(::grpc::ServerContext* context, const ::google::protobuf::StringValue* request, ::google::protobuf::BoolValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tortuga::Service::Ping(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Tortuga::Service::QuitQuitQuit(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tortuga

