// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct DocumentMask {
    // message fields
    pub field_paths: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DocumentMask {
    pub fn new() -> DocumentMask {
        ::std::default::Default::default()
    }

    // repeated string field_paths = 1;

    pub fn clear_field_paths(&mut self) {
        self.field_paths.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_paths(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.field_paths = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_paths(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.field_paths
    }

    // Take field
    pub fn take_field_paths(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.field_paths, ::protobuf::RepeatedField::new())
    }

    pub fn get_field_paths(&self) -> &[::std::string::String] {
        &self.field_paths
    }
}

impl ::protobuf::Message for DocumentMask {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.field_paths)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.field_paths {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.field_paths {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DocumentMask {
        DocumentMask::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "field_paths",
                    |m: &DocumentMask| { &m.field_paths },
                    |m: &mut DocumentMask| { &mut m.field_paths },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DocumentMask>(
                    "DocumentMask",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DocumentMask {
        static mut instance: ::protobuf::lazy::Lazy<DocumentMask> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DocumentMask,
        };
        unsafe {
            instance.get(DocumentMask::new)
        }
    }
}

impl ::protobuf::Clear for DocumentMask {
    fn clear(&mut self) {
        self.clear_field_paths();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DocumentMask {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentMask {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Precondition {
    // message oneof groups
    pub condition_type: ::std::option::Option<Precondition_oneof_condition_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Precondition_oneof_condition_type {
    exists(bool),
    update_time(::protobuf::well_known_types::Timestamp),
}

impl Precondition {
    pub fn new() -> Precondition {
        ::std::default::Default::default()
    }

    // bool exists = 1;

    pub fn clear_exists(&mut self) {
        self.condition_type = ::std::option::Option::None;
    }

    pub fn has_exists(&self) -> bool {
        match self.condition_type {
            ::std::option::Option::Some(Precondition_oneof_condition_type::exists(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exists(&mut self, v: bool) {
        self.condition_type = ::std::option::Option::Some(Precondition_oneof_condition_type::exists(v))
    }

    pub fn get_exists(&self) -> bool {
        match self.condition_type {
            ::std::option::Option::Some(Precondition_oneof_condition_type::exists(v)) => v,
            _ => false,
        }
    }

    // .google.protobuf.Timestamp update_time = 2;

    pub fn clear_update_time(&mut self) {
        self.condition_type = ::std::option::Option::None;
    }

    pub fn has_update_time(&self) -> bool {
        match self.condition_type {
            ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.condition_type = ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(_)) = self.condition_type {
        } else {
            self.condition_type = ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.condition_type {
            ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_update_time() {
            match self.condition_type.take() {
                ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }

    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.condition_type {
            ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(ref v)) => v,
            _ => ::protobuf::well_known_types::Timestamp::default_instance(),
        }
    }
}

impl ::protobuf::Message for Precondition {
    fn is_initialized(&self) -> bool {
        if let Some(Precondition_oneof_condition_type::update_time(ref v)) = self.condition_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.condition_type = ::std::option::Option::Some(Precondition_oneof_condition_type::exists(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.condition_type = ::std::option::Option::Some(Precondition_oneof_condition_type::update_time(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.condition_type {
            match v {
                &Precondition_oneof_condition_type::exists(v) => {
                    my_size += 2;
                },
                &Precondition_oneof_condition_type::update_time(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.condition_type {
            match v {
                &Precondition_oneof_condition_type::exists(v) => {
                    os.write_bool(1, v)?;
                },
                &Precondition_oneof_condition_type::update_time(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Precondition {
        Precondition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "exists",
                    Precondition::has_exists,
                    Precondition::get_exists,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Timestamp>(
                    "update_time",
                    Precondition::has_update_time,
                    Precondition::get_update_time,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Precondition>(
                    "Precondition",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Precondition {
        static mut instance: ::protobuf::lazy::Lazy<Precondition> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Precondition,
        };
        unsafe {
            instance.get(Precondition::new)
        }
    }
}

impl ::protobuf::Clear for Precondition {
    fn clear(&mut self) {
        self.clear_exists();
        self.clear_update_time();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Precondition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Precondition {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionOptions {
    // message oneof groups
    pub mode: ::std::option::Option<TransactionOptions_oneof_mode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum TransactionOptions_oneof_mode {
    read_only(TransactionOptions_ReadOnly),
    read_write(TransactionOptions_ReadWrite),
}

impl TransactionOptions {
    pub fn new() -> TransactionOptions {
        ::std::default::Default::default()
    }

    // .google.firestore.v1beta1.TransactionOptions.ReadOnly read_only = 2;

    pub fn clear_read_only(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_read_only(&self) -> bool {
        match self.mode {
            ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_only(&mut self, v: TransactionOptions_ReadOnly) {
        self.mode = ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_only(&mut self) -> &mut TransactionOptions_ReadOnly {
        if let ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(_)) = self.mode {
        } else {
            self.mode = ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(TransactionOptions_ReadOnly::new()));
        }
        match self.mode {
            ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_only(&mut self) -> TransactionOptions_ReadOnly {
        if self.has_read_only() {
            match self.mode.take() {
                ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(v)) => v,
                _ => panic!(),
            }
        } else {
            TransactionOptions_ReadOnly::new()
        }
    }

    pub fn get_read_only(&self) -> &TransactionOptions_ReadOnly {
        match self.mode {
            ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(ref v)) => v,
            _ => TransactionOptions_ReadOnly::default_instance(),
        }
    }

    // .google.firestore.v1beta1.TransactionOptions.ReadWrite read_write = 3;

    pub fn clear_read_write(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_read_write(&self) -> bool {
        match self.mode {
            ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_write(&mut self, v: TransactionOptions_ReadWrite) {
        self.mode = ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_write(&mut self) -> &mut TransactionOptions_ReadWrite {
        if let ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(_)) = self.mode {
        } else {
            self.mode = ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(TransactionOptions_ReadWrite::new()));
        }
        match self.mode {
            ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_write(&mut self) -> TransactionOptions_ReadWrite {
        if self.has_read_write() {
            match self.mode.take() {
                ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(v)) => v,
                _ => panic!(),
            }
        } else {
            TransactionOptions_ReadWrite::new()
        }
    }

    pub fn get_read_write(&self) -> &TransactionOptions_ReadWrite {
        match self.mode {
            ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(ref v)) => v,
            _ => TransactionOptions_ReadWrite::default_instance(),
        }
    }
}

impl ::protobuf::Message for TransactionOptions {
    fn is_initialized(&self) -> bool {
        if let Some(TransactionOptions_oneof_mode::read_only(ref v)) = self.mode {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(TransactionOptions_oneof_mode::read_write(ref v)) = self.mode {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.mode = ::std::option::Option::Some(TransactionOptions_oneof_mode::read_only(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.mode = ::std::option::Option::Some(TransactionOptions_oneof_mode::read_write(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.mode {
            match v {
                &TransactionOptions_oneof_mode::read_only(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &TransactionOptions_oneof_mode::read_write(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.mode {
            match v {
                &TransactionOptions_oneof_mode::read_only(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &TransactionOptions_oneof_mode::read_write(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionOptions {
        TransactionOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TransactionOptions_ReadOnly>(
                    "read_only",
                    TransactionOptions::has_read_only,
                    TransactionOptions::get_read_only,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TransactionOptions_ReadWrite>(
                    "read_write",
                    TransactionOptions::has_read_write,
                    TransactionOptions::get_read_write,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionOptions>(
                    "TransactionOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionOptions {
        static mut instance: ::protobuf::lazy::Lazy<TransactionOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionOptions,
        };
        unsafe {
            instance.get(TransactionOptions::new)
        }
    }
}

impl ::protobuf::Clear for TransactionOptions {
    fn clear(&mut self) {
        self.clear_read_only();
        self.clear_read_write();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionOptions_ReadWrite {
    // message fields
    pub retry_transaction: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TransactionOptions_ReadWrite {
    pub fn new() -> TransactionOptions_ReadWrite {
        ::std::default::Default::default()
    }

    // bytes retry_transaction = 1;

    pub fn clear_retry_transaction(&mut self) {
        self.retry_transaction.clear();
    }

    // Param is passed by value, moved
    pub fn set_retry_transaction(&mut self, v: ::std::vec::Vec<u8>) {
        self.retry_transaction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_retry_transaction(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.retry_transaction
    }

    // Take field
    pub fn take_retry_transaction(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.retry_transaction, ::std::vec::Vec::new())
    }

    pub fn get_retry_transaction(&self) -> &[u8] {
        &self.retry_transaction
    }
}

impl ::protobuf::Message for TransactionOptions_ReadWrite {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.retry_transaction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.retry_transaction.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.retry_transaction);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.retry_transaction.is_empty() {
            os.write_bytes(1, &self.retry_transaction)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionOptions_ReadWrite {
        TransactionOptions_ReadWrite::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "retry_transaction",
                    |m: &TransactionOptions_ReadWrite| { &m.retry_transaction },
                    |m: &mut TransactionOptions_ReadWrite| { &mut m.retry_transaction },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionOptions_ReadWrite>(
                    "TransactionOptions_ReadWrite",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionOptions_ReadWrite {
        static mut instance: ::protobuf::lazy::Lazy<TransactionOptions_ReadWrite> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionOptions_ReadWrite,
        };
        unsafe {
            instance.get(TransactionOptions_ReadWrite::new)
        }
    }
}

impl ::protobuf::Clear for TransactionOptions_ReadWrite {
    fn clear(&mut self) {
        self.clear_retry_transaction();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionOptions_ReadWrite {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionOptions_ReadWrite {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionOptions_ReadOnly {
    // message oneof groups
    pub consistency_selector: ::std::option::Option<TransactionOptions_ReadOnly_oneof_consistency_selector>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum TransactionOptions_ReadOnly_oneof_consistency_selector {
    read_time(::protobuf::well_known_types::Timestamp),
}

impl TransactionOptions_ReadOnly {
    pub fn new() -> TransactionOptions_ReadOnly {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp read_time = 2;

    pub fn clear_read_time(&mut self) {
        self.consistency_selector = ::std::option::Option::None;
    }

    pub fn has_read_time(&self) -> bool {
        match self.consistency_selector {
            ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.consistency_selector = ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(_)) = self.consistency_selector {
        } else {
            self.consistency_selector = ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.consistency_selector {
            ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_read_time() {
            match self.consistency_selector.take() {
                ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }

    pub fn get_read_time(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.consistency_selector {
            ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(ref v)) => v,
            _ => ::protobuf::well_known_types::Timestamp::default_instance(),
        }
    }
}

impl ::protobuf::Message for TransactionOptions_ReadOnly {
    fn is_initialized(&self) -> bool {
        if let Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(ref v)) = self.consistency_selector {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.consistency_selector = ::std::option::Option::Some(TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.consistency_selector {
            match v {
                &TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.consistency_selector {
            match v {
                &TransactionOptions_ReadOnly_oneof_consistency_selector::read_time(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionOptions_ReadOnly {
        TransactionOptions_ReadOnly::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Timestamp>(
                    "read_time",
                    TransactionOptions_ReadOnly::has_read_time,
                    TransactionOptions_ReadOnly::get_read_time,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionOptions_ReadOnly>(
                    "TransactionOptions_ReadOnly",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionOptions_ReadOnly {
        static mut instance: ::protobuf::lazy::Lazy<TransactionOptions_ReadOnly> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionOptions_ReadOnly,
        };
        unsafe {
            instance.get(TransactionOptions_ReadOnly::new)
        }
    }
}

impl ::protobuf::Clear for TransactionOptions_ReadOnly {
    fn clear(&mut self) {
        self.clear_read_time();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionOptions_ReadOnly {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionOptions_ReadOnly {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%google/firestore/v1beta1/common.proto\x12\x18google.firestore.v1beta1\
    \x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/protobuf/timestamp.pr\
    oto\"/\n\x0cDocumentMask\x12\x1f\n\x0bfield_paths\x18\x01\x20\x03(\tR\nf\
    ieldPaths\"y\n\x0cPrecondition\x12\x18\n\x06exists\x18\x01\x20\x01(\x08H\
    \0R\x06exists\x12=\n\x0bupdate_time\x18\x02\x20\x01(\x0b2\x1a.google.pro\
    tobuf.TimestampH\0R\nupdateTimeB\x10\n\x0econdition_type\"\xe4\x02\n\x12\
    TransactionOptions\x12T\n\tread_only\x18\x02\x20\x01(\x0b25.google.fires\
    tore.v1beta1.TransactionOptions.ReadOnlyH\0R\x08readOnly\x12W\n\nread_wr\
    ite\x18\x03\x20\x01(\x0b26.google.firestore.v1beta1.TransactionOptions.R\
    eadWriteH\0R\treadWrite\x1a8\n\tReadWrite\x12+\n\x11retry_transaction\
    \x18\x01\x20\x01(\x0cR\x10retryTransaction\x1a]\n\x08ReadOnly\x129\n\tre\
    ad_time\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampH\0R\x08readT\
    imeB\x16\n\x14consistency_selectorB\x06\n\x04modeB\xb9\x01\n\x1ccom.goog\
    le.firestore.v1beta1B\x0bCommonProtoP\x01ZAgoogle.golang.org/genproto/go\
    ogleapis/firestore/v1beta1;firestore\xa2\x02\x04GCFS\xaa\x02\x1eGoogle.C\
    loud.Firestore.V1Beta1\xca\x02\x1eGoogle\\Cloud\\Firestore\\V1beta1J\xd6\
    \x18\n\x06\x12\x04\x0e\0R\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\
    \x04\x20Copyright\x202018\x20Google\x20LLC\n\n\x20Licensed\x20under\x20t\
    he\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\n\
    \x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20complian\
    ce\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20\
    of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/\
    licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20la\
    w\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distributed\
    \x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20\
    IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20A\
    NY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\x20Li\
    cense\x20for\x20the\x20specific\x20language\x20governing\x20permissions\
    \x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\
    \x12\x03\x10\x08\x20\n\t\n\x02\x03\0\x12\x03\x12\x07%\n\t\n\x02\x03\x01\
    \x12\x03\x13\x07(\n\x08\n\x01\x08\x12\x03\x15\0;\n\x0b\n\x04\x08\xe7\x07\
    \0\x12\x03\x15\0;\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x15\x07\x17\n\r\
    \n\x06\x08\xe7\x07\0\x02\0\x12\x03\x15\x07\x17\n\x0e\n\x07\x08\xe7\x07\0\
    \x02\0\x01\x12\x03\x15\x07\x17\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x15\
    \x1a:\n\x08\n\x01\x08\x12\x03\x16\0X\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\
    \x16\0X\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x16\x07\x11\n\r\n\x06\
    \x08\xe7\x07\x01\x02\0\x12\x03\x16\x07\x11\n\x0e\n\x07\x08\xe7\x07\x01\
    \x02\0\x01\x12\x03\x16\x07\x11\n\x0c\n\x05\x08\xe7\x07\x01\x07\x12\x03\
    \x16\x14W\n\x08\n\x01\x08\x12\x03\x17\0\"\n\x0b\n\x04\x08\xe7\x07\x02\
    \x12\x03\x17\0\"\n\x0c\n\x05\x08\xe7\x07\x02\x02\x12\x03\x17\x07\x1a\n\r\
    \n\x06\x08\xe7\x07\x02\x02\0\x12\x03\x17\x07\x1a\n\x0e\n\x07\x08\xe7\x07\
    \x02\x02\0\x01\x12\x03\x17\x07\x1a\n\x0c\n\x05\x08\xe7\x07\x02\x03\x12\
    \x03\x17\x1d!\n\x08\n\x01\x08\x12\x03\x18\0,\n\x0b\n\x04\x08\xe7\x07\x03\
    \x12\x03\x18\0,\n\x0c\n\x05\x08\xe7\x07\x03\x02\x12\x03\x18\x07\x1b\n\r\
    \n\x06\x08\xe7\x07\x03\x02\0\x12\x03\x18\x07\x1b\n\x0e\n\x07\x08\xe7\x07\
    \x03\x02\0\x01\x12\x03\x18\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x03\x07\x12\
    \x03\x18\x1e+\n\x08\n\x01\x08\x12\x03\x19\05\n\x0b\n\x04\x08\xe7\x07\x04\
    \x12\x03\x19\05\n\x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\x19\x07\x13\n\r\
    \n\x06\x08\xe7\x07\x04\x02\0\x12\x03\x19\x07\x13\n\x0e\n\x07\x08\xe7\x07\
    \x04\x02\0\x01\x12\x03\x19\x07\x13\n\x0c\n\x05\x08\xe7\x07\x04\x07\x12\
    \x03\x19\x164\n\x08\n\x01\x08\x12\x03\x1a\0\"\n\x0b\n\x04\x08\xe7\x07\
    \x05\x12\x03\x1a\0\"\n\x0c\n\x05\x08\xe7\x07\x05\x02\x12\x03\x1a\x07\x18\
    \n\r\n\x06\x08\xe7\x07\x05\x02\0\x12\x03\x1a\x07\x18\n\x0e\n\x07\x08\xe7\
    \x07\x05\x02\0\x01\x12\x03\x1a\x07\x18\n\x0c\n\x05\x08\xe7\x07\x05\x07\
    \x12\x03\x1a\x1b!\n\x08\n\x01\x08\x12\x03\x1b\0;\n\x0b\n\x04\x08\xe7\x07\
    \x06\x12\x03\x1b\0;\n\x0c\n\x05\x08\xe7\x07\x06\x02\x12\x03\x1b\x07\x14\
    \n\r\n\x06\x08\xe7\x07\x06\x02\0\x12\x03\x1b\x07\x14\n\x0e\n\x07\x08\xe7\
    \x07\x06\x02\0\x01\x12\x03\x1b\x07\x14\n\x0c\n\x05\x08\xe7\x07\x06\x07\
    \x12\x03\x1b\x17:\n\xd8\x02\n\x02\x04\0\x12\x04#\0'\x01\x1a\xcb\x02\x20A\
    \x20set\x20of\x20field\x20paths\x20on\x20a\x20document.\n\x20Used\x20to\
    \x20restrict\x20a\x20get\x20or\x20update\x20operation\x20on\x20a\x20docu\
    ment\x20to\x20a\x20subset\x20of\x20its\n\x20fields.\n\x20This\x20is\x20d\
    ifferent\x20from\x20standard\x20field\x20masks,\x20as\x20this\x20is\x20a\
    lways\x20scoped\x20to\x20a\n\x20[Document][google.firestore.v1beta1.Docu\
    ment],\x20and\x20takes\x20in\x20account\x20the\x20dynamic\x20nature\x20o\
    f\x20[Value][google.firestore.v1beta1.Value].\n\n\n\n\x03\x04\0\x01\x12\
    \x03#\x08\x14\n\x98\x01\n\x04\x04\0\x02\0\x12\x03&\x02\"\x1a\x8a\x01\x20\
    The\x20list\x20of\x20field\x20paths\x20in\x20the\x20mask.\x20See\x20[Doc\
    ument.fields][google.firestore.v1beta1.Document.fields]\x20for\x20a\x20f\
    ield\n\x20path\x20syntax\x20reference.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03&\x02\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03&\x0b\x11\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03&\x12\x1d\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03&\x20!\
    \nL\n\x02\x04\x01\x12\x04*\05\x01\x1a@\x20A\x20precondition\x20on\x20a\
    \x20document,\x20used\x20for\x20conditional\x20operations.\n\n\n\n\x03\
    \x04\x01\x01\x12\x03*\x08\x14\n)\n\x04\x04\x01\x08\0\x12\x04,\x024\x03\
    \x1a\x1b\x20The\x20type\x20of\x20precondition.\n\n\x0c\n\x05\x04\x01\x08\
    \0\x01\x12\x03,\x08\x16\n|\n\x04\x04\x01\x02\0\x12\x03/\x04\x14\x1ao\x20\
    When\x20set\x20to\x20`true`,\x20the\x20target\x20document\x20must\x20exi\
    st.\n\x20When\x20set\x20to\x20`false`,\x20the\x20target\x20document\x20m\
    ust\x20not\x20exist.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03/\x04\x08\n\
    \x0c\n\x05\x04\x01\x02\0\x01\x12\x03/\t\x0f\n\x0c\n\x05\x04\x01\x02\0\
    \x03\x12\x03/\x12\x13\na\n\x04\x04\x01\x02\x01\x12\x033\x04.\x1aT\x20Whe\
    n\x20set,\x20the\x20target\x20document\x20must\x20exist\x20and\x20have\
    \x20been\x20last\x20updated\x20at\n\x20that\x20time.\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x06\x12\x033\x04\x1d\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x033\x1e)\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x033,-\n5\n\x02\x04\x02\
    \x12\x048\0R\x01\x1a)\x20Options\x20for\x20creating\x20a\x20new\x20trans\
    action.\n\n\n\n\x03\x04\x02\x01\x12\x038\x08\x1a\nW\n\x04\x04\x02\x03\0\
    \x12\x04:\x02=\x03\x1aI\x20Options\x20for\x20a\x20transaction\x20that\
    \x20can\x20be\x20used\x20to\x20read\x20and\x20write\x20documents.\n\n\
    \x0c\n\x05\x04\x02\x03\0\x01\x12\x03:\n\x13\n2\n\x06\x04\x02\x03\0\x02\0\
    \x12\x03<\x04\x20\x1a#\x20An\x20optional\x20transaction\x20to\x20retry.\
    \n\n\x0f\n\x07\x04\x02\x03\0\x02\0\x04\x12\x04<\x04:\x15\n\x0e\n\x07\x04\
    \x02\x03\0\x02\0\x05\x12\x03<\x04\t\n\x0e\n\x07\x04\x02\x03\0\x02\0\x01\
    \x12\x03<\n\x1b\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\x12\x03<\x1e\x1f\nR\
    \n\x04\x04\x02\x03\x01\x12\x04@\x02H\x03\x1aD\x20Options\x20for\x20a\x20\
    transaction\x20that\x20can\x20only\x20be\x20used\x20to\x20read\x20docume\
    nts.\n\n\x0c\n\x05\x04\x02\x03\x01\x01\x12\x03@\n\x12\ni\n\x06\x04\x02\
    \x03\x01\x08\0\x12\x04C\x04G\x05\x1aY\x20The\x20consistency\x20mode\x20f\
    or\x20this\x20transaction.\x20If\x20not\x20set,\x20defaults\x20to\x20str\
    ong\n\x20consistency.\n\n\x0e\n\x07\x04\x02\x03\x01\x08\0\x01\x12\x03C\n\
    \x1e\n[\n\x06\x04\x02\x03\x01\x02\0\x12\x03F\x06.\x1aL\x20Reads\x20docum\
    ents\x20at\x20the\x20given\x20time.\n\x20This\x20may\x20not\x20be\x20old\
    er\x20than\x2060\x20seconds.\n\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x06\x12\
    \x03F\x06\x1f\n\x0e\n\x07\x04\x02\x03\x01\x02\0\x01\x12\x03F\x20)\n\x0e\
    \n\x07\x04\x02\x03\x01\x02\0\x03\x12\x03F,-\n,\n\x04\x04\x02\x08\0\x12\
    \x04K\x02Q\x03\x1a\x1e\x20The\x20mode\x20of\x20the\x20transaction.\n\n\
    \x0c\n\x05\x04\x02\x08\0\x01\x12\x03K\x08\x0c\nD\n\x04\x04\x02\x02\0\x12\
    \x03M\x04\x1b\x1a7\x20The\x20transaction\x20can\x20only\x20be\x20used\
    \x20for\x20read\x20operations.\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03M\
    \x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03M\r\x16\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03M\x19\x1a\nN\n\x04\x04\x02\x02\x01\x12\x03P\x04\
    \x1d\x1aA\x20The\x20transaction\x20can\x20be\x20used\x20for\x20both\x20r\
    ead\x20and\x20write\x20operations.\n\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\
    \x03P\x04\r\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03P\x0e\x18\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03P\x1b\x1cb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
