// This file is generated by rust-protobuf 2.2.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Write {
    // message fields
    pub update_mask: ::protobuf::SingularPtrField<super::common::DocumentMask>,
    pub current_document: ::protobuf::SingularPtrField<super::common::Precondition>,
    // message oneof groups
    pub operation: ::std::option::Option<Write_oneof_operation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Write_oneof_operation {
    update(super::document::Document),
    delete(::std::string::String),
    transform(DocumentTransform),
}

impl Write {
    pub fn new() -> Write {
        ::std::default::Default::default()
    }

    // .google.firestore.v1beta1.Document update = 1;

    pub fn clear_update(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_update(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::update(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_update(&mut self, v: super::document::Document) {
        self.operation = ::std::option::Option::Some(Write_oneof_operation::update(v))
    }

    // Mutable pointer to the field.
    pub fn mut_update(&mut self) -> &mut super::document::Document {
        if let ::std::option::Option::Some(Write_oneof_operation::update(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Write_oneof_operation::update(super::document::Document::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::update(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_update(&mut self) -> super::document::Document {
        if self.has_update() {
            match self.operation.take() {
                ::std::option::Option::Some(Write_oneof_operation::update(v)) => v,
                _ => panic!(),
            }
        } else {
            super::document::Document::new()
        }
    }

    pub fn get_update(&self) -> &super::document::Document {
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::update(ref v)) => v,
            _ => super::document::Document::default_instance(),
        }
    }

    // string delete = 2;

    pub fn clear_delete(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: ::std::string::String) {
        self.operation = ::std::option::Option::Some(Write_oneof_operation::delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Write_oneof_operation::delete(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Write_oneof_operation::delete(::std::string::String::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> ::std::string::String {
        if self.has_delete() {
            match self.operation.take() {
                ::std::option::Option::Some(Write_oneof_operation::delete(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_delete(&self) -> &str {
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::delete(ref v)) => v,
            _ => "",
        }
    }

    // .google.firestore.v1beta1.DocumentTransform transform = 6;

    pub fn clear_transform(&mut self) {
        self.operation = ::std::option::Option::None;
    }

    pub fn has_transform(&self) -> bool {
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::transform(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transform(&mut self, v: DocumentTransform) {
        self.operation = ::std::option::Option::Some(Write_oneof_operation::transform(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transform(&mut self) -> &mut DocumentTransform {
        if let ::std::option::Option::Some(Write_oneof_operation::transform(_)) = self.operation {
        } else {
            self.operation = ::std::option::Option::Some(Write_oneof_operation::transform(DocumentTransform::new()));
        }
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::transform(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transform(&mut self) -> DocumentTransform {
        if self.has_transform() {
            match self.operation.take() {
                ::std::option::Option::Some(Write_oneof_operation::transform(v)) => v,
                _ => panic!(),
            }
        } else {
            DocumentTransform::new()
        }
    }

    pub fn get_transform(&self) -> &DocumentTransform {
        match self.operation {
            ::std::option::Option::Some(Write_oneof_operation::transform(ref v)) => v,
            _ => DocumentTransform::default_instance(),
        }
    }

    // .google.firestore.v1beta1.DocumentMask update_mask = 3;

    pub fn clear_update_mask(&mut self) {
        self.update_mask.clear();
    }

    pub fn has_update_mask(&self) -> bool {
        self.update_mask.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_mask(&mut self, v: super::common::DocumentMask) {
        self.update_mask = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_mask(&mut self) -> &mut super::common::DocumentMask {
        if self.update_mask.is_none() {
            self.update_mask.set_default();
        }
        self.update_mask.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_mask(&mut self) -> super::common::DocumentMask {
        self.update_mask.take().unwrap_or_else(|| super::common::DocumentMask::new())
    }

    pub fn get_update_mask(&self) -> &super::common::DocumentMask {
        self.update_mask.as_ref().unwrap_or_else(|| super::common::DocumentMask::default_instance())
    }

    // .google.firestore.v1beta1.Precondition current_document = 4;

    pub fn clear_current_document(&mut self) {
        self.current_document.clear();
    }

    pub fn has_current_document(&self) -> bool {
        self.current_document.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_document(&mut self, v: super::common::Precondition) {
        self.current_document = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_document(&mut self) -> &mut super::common::Precondition {
        if self.current_document.is_none() {
            self.current_document.set_default();
        }
        self.current_document.as_mut().unwrap()
    }

    // Take field
    pub fn take_current_document(&mut self) -> super::common::Precondition {
        self.current_document.take().unwrap_or_else(|| super::common::Precondition::new())
    }

    pub fn get_current_document(&self) -> &super::common::Precondition {
        self.current_document.as_ref().unwrap_or_else(|| super::common::Precondition::default_instance())
    }
}

impl ::protobuf::Message for Write {
    fn is_initialized(&self) -> bool {
        if let Some(Write_oneof_operation::update(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Write_oneof_operation::transform(ref v)) = self.operation {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.update_mask {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.current_document {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Write_oneof_operation::update(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Write_oneof_operation::delete(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.operation = ::std::option::Option::Some(Write_oneof_operation::transform(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_mask)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.current_document)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.update_mask.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.current_document.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &Write_oneof_operation::update(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Write_oneof_operation::delete(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &Write_oneof_operation::transform(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.update_mask.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.current_document.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.operation {
            match v {
                &Write_oneof_operation::update(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Write_oneof_operation::delete(ref v) => {
                    os.write_string(2, v)?;
                },
                &Write_oneof_operation::transform(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Write {
        Write::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::document::Document>(
                    "update",
                    Write::has_update,
                    Write::get_update,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "delete",
                    Write::has_delete,
                    Write::get_delete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DocumentTransform>(
                    "transform",
                    Write::has_transform,
                    Write::get_transform,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::DocumentMask>>(
                    "update_mask",
                    |m: &Write| { &m.update_mask },
                    |m: &mut Write| { &mut m.update_mask },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Precondition>>(
                    "current_document",
                    |m: &Write| { &m.current_document },
                    |m: &mut Write| { &mut m.current_document },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Write>(
                    "Write",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Write {
        static mut instance: ::protobuf::lazy::Lazy<Write> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Write,
        };
        unsafe {
            instance.get(Write::new)
        }
    }
}

impl ::protobuf::Clear for Write {
    fn clear(&mut self) {
        self.clear_update();
        self.clear_delete();
        self.clear_transform();
        self.clear_update_mask();
        self.clear_current_document();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Write {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Write {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DocumentTransform {
    // message fields
    pub document: ::std::string::String,
    pub field_transforms: ::protobuf::RepeatedField<DocumentTransform_FieldTransform>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DocumentTransform {
    pub fn new() -> DocumentTransform {
        ::std::default::Default::default()
    }

    // string document = 1;

    pub fn clear_document(&mut self) {
        self.document.clear();
    }

    // Param is passed by value, moved
    pub fn set_document(&mut self, v: ::std::string::String) {
        self.document = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_document(&mut self) -> &mut ::std::string::String {
        &mut self.document
    }

    // Take field
    pub fn take_document(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.document, ::std::string::String::new())
    }

    pub fn get_document(&self) -> &str {
        &self.document
    }

    // repeated .google.firestore.v1beta1.DocumentTransform.FieldTransform field_transforms = 2;

    pub fn clear_field_transforms(&mut self) {
        self.field_transforms.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_transforms(&mut self, v: ::protobuf::RepeatedField<DocumentTransform_FieldTransform>) {
        self.field_transforms = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_transforms(&mut self) -> &mut ::protobuf::RepeatedField<DocumentTransform_FieldTransform> {
        &mut self.field_transforms
    }

    // Take field
    pub fn take_field_transforms(&mut self) -> ::protobuf::RepeatedField<DocumentTransform_FieldTransform> {
        ::std::mem::replace(&mut self.field_transforms, ::protobuf::RepeatedField::new())
    }

    pub fn get_field_transforms(&self) -> &[DocumentTransform_FieldTransform] {
        &self.field_transforms
    }
}

impl ::protobuf::Message for DocumentTransform {
    fn is_initialized(&self) -> bool {
        for v in &self.field_transforms {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.document)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_transforms)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.document.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.document);
        }
        for value in &self.field_transforms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.document.is_empty() {
            os.write_string(1, &self.document)?;
        }
        for v in &self.field_transforms {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DocumentTransform {
        DocumentTransform::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "document",
                    |m: &DocumentTransform| { &m.document },
                    |m: &mut DocumentTransform| { &mut m.document },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DocumentTransform_FieldTransform>>(
                    "field_transforms",
                    |m: &DocumentTransform| { &m.field_transforms },
                    |m: &mut DocumentTransform| { &mut m.field_transforms },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DocumentTransform>(
                    "DocumentTransform",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DocumentTransform {
        static mut instance: ::protobuf::lazy::Lazy<DocumentTransform> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DocumentTransform,
        };
        unsafe {
            instance.get(DocumentTransform::new)
        }
    }
}

impl ::protobuf::Clear for DocumentTransform {
    fn clear(&mut self) {
        self.clear_document();
        self.clear_field_transforms();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DocumentTransform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentTransform {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DocumentTransform_FieldTransform {
    // message fields
    pub field_path: ::std::string::String,
    // message oneof groups
    pub transform_type: ::std::option::Option<DocumentTransform_FieldTransform_oneof_transform_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum DocumentTransform_FieldTransform_oneof_transform_type {
    set_to_server_value(DocumentTransform_FieldTransform_ServerValue),
    append_missing_elements(super::document::ArrayValue),
    remove_all_from_array(super::document::ArrayValue),
}

impl DocumentTransform_FieldTransform {
    pub fn new() -> DocumentTransform_FieldTransform {
        ::std::default::Default::default()
    }

    // string field_path = 1;

    pub fn clear_field_path(&mut self) {
        self.field_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_path(&mut self, v: ::std::string::String) {
        self.field_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_path(&mut self) -> &mut ::std::string::String {
        &mut self.field_path
    }

    // Take field
    pub fn take_field_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_path, ::std::string::String::new())
    }

    pub fn get_field_path(&self) -> &str {
        &self.field_path
    }

    // .google.firestore.v1beta1.DocumentTransform.FieldTransform.ServerValue set_to_server_value = 2;

    pub fn clear_set_to_server_value(&mut self) {
        self.transform_type = ::std::option::Option::None;
    }

    pub fn has_set_to_server_value(&self) -> bool {
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::set_to_server_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_set_to_server_value(&mut self, v: DocumentTransform_FieldTransform_ServerValue) {
        self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::set_to_server_value(v))
    }

    pub fn get_set_to_server_value(&self) -> DocumentTransform_FieldTransform_ServerValue {
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::set_to_server_value(v)) => v,
            _ => DocumentTransform_FieldTransform_ServerValue::SERVER_VALUE_UNSPECIFIED,
        }
    }

    // .google.firestore.v1beta1.ArrayValue append_missing_elements = 6;

    pub fn clear_append_missing_elements(&mut self) {
        self.transform_type = ::std::option::Option::None;
    }

    pub fn has_append_missing_elements(&self) -> bool {
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_append_missing_elements(&mut self, v: super::document::ArrayValue) {
        self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(v))
    }

    // Mutable pointer to the field.
    pub fn mut_append_missing_elements(&mut self) -> &mut super::document::ArrayValue {
        if let ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(_)) = self.transform_type {
        } else {
            self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(super::document::ArrayValue::new()));
        }
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_append_missing_elements(&mut self) -> super::document::ArrayValue {
        if self.has_append_missing_elements() {
            match self.transform_type.take() {
                ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(v)) => v,
                _ => panic!(),
            }
        } else {
            super::document::ArrayValue::new()
        }
    }

    pub fn get_append_missing_elements(&self) -> &super::document::ArrayValue {
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(ref v)) => v,
            _ => super::document::ArrayValue::default_instance(),
        }
    }

    // .google.firestore.v1beta1.ArrayValue remove_all_from_array = 7;

    pub fn clear_remove_all_from_array(&mut self) {
        self.transform_type = ::std::option::Option::None;
    }

    pub fn has_remove_all_from_array(&self) -> bool {
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remove_all_from_array(&mut self, v: super::document::ArrayValue) {
        self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remove_all_from_array(&mut self) -> &mut super::document::ArrayValue {
        if let ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(_)) = self.transform_type {
        } else {
            self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(super::document::ArrayValue::new()));
        }
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remove_all_from_array(&mut self) -> super::document::ArrayValue {
        if self.has_remove_all_from_array() {
            match self.transform_type.take() {
                ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(v)) => v,
                _ => panic!(),
            }
        } else {
            super::document::ArrayValue::new()
        }
    }

    pub fn get_remove_all_from_array(&self) -> &super::document::ArrayValue {
        match self.transform_type {
            ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(ref v)) => v,
            _ => super::document::ArrayValue::default_instance(),
        }
    }
}

impl ::protobuf::Message for DocumentTransform_FieldTransform {
    fn is_initialized(&self) -> bool {
        if let Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(ref v)) = self.transform_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(ref v)) = self.transform_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::set_to_server_value(is.read_enum()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.transform_type = ::std::option::Option::Some(DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_path);
        }
        if let ::std::option::Option::Some(ref v) = self.transform_type {
            match v {
                &DocumentTransform_FieldTransform_oneof_transform_type::set_to_server_value(v) => {
                    my_size += ::protobuf::rt::enum_size(2, v);
                },
                &DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.field_path.is_empty() {
            os.write_string(1, &self.field_path)?;
        }
        if let ::std::option::Option::Some(ref v) = self.transform_type {
            match v {
                &DocumentTransform_FieldTransform_oneof_transform_type::set_to_server_value(v) => {
                    os.write_enum(2, v.value())?;
                },
                &DocumentTransform_FieldTransform_oneof_transform_type::append_missing_elements(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &DocumentTransform_FieldTransform_oneof_transform_type::remove_all_from_array(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DocumentTransform_FieldTransform {
        DocumentTransform_FieldTransform::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "field_path",
                    |m: &DocumentTransform_FieldTransform| { &m.field_path },
                    |m: &mut DocumentTransform_FieldTransform| { &mut m.field_path },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, DocumentTransform_FieldTransform_ServerValue>(
                    "set_to_server_value",
                    DocumentTransform_FieldTransform::has_set_to_server_value,
                    DocumentTransform_FieldTransform::get_set_to_server_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::document::ArrayValue>(
                    "append_missing_elements",
                    DocumentTransform_FieldTransform::has_append_missing_elements,
                    DocumentTransform_FieldTransform::get_append_missing_elements,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::document::ArrayValue>(
                    "remove_all_from_array",
                    DocumentTransform_FieldTransform::has_remove_all_from_array,
                    DocumentTransform_FieldTransform::get_remove_all_from_array,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DocumentTransform_FieldTransform>(
                    "DocumentTransform_FieldTransform",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DocumentTransform_FieldTransform {
        static mut instance: ::protobuf::lazy::Lazy<DocumentTransform_FieldTransform> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DocumentTransform_FieldTransform,
        };
        unsafe {
            instance.get(DocumentTransform_FieldTransform::new)
        }
    }
}

impl ::protobuf::Clear for DocumentTransform_FieldTransform {
    fn clear(&mut self) {
        self.clear_field_path();
        self.clear_set_to_server_value();
        self.clear_append_missing_elements();
        self.clear_remove_all_from_array();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DocumentTransform_FieldTransform {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentTransform_FieldTransform {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum DocumentTransform_FieldTransform_ServerValue {
    SERVER_VALUE_UNSPECIFIED = 0,
    REQUEST_TIME = 1,
}

impl ::protobuf::ProtobufEnum for DocumentTransform_FieldTransform_ServerValue {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DocumentTransform_FieldTransform_ServerValue> {
        match value {
            0 => ::std::option::Option::Some(DocumentTransform_FieldTransform_ServerValue::SERVER_VALUE_UNSPECIFIED),
            1 => ::std::option::Option::Some(DocumentTransform_FieldTransform_ServerValue::REQUEST_TIME),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [DocumentTransform_FieldTransform_ServerValue] = &[
            DocumentTransform_FieldTransform_ServerValue::SERVER_VALUE_UNSPECIFIED,
            DocumentTransform_FieldTransform_ServerValue::REQUEST_TIME,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("DocumentTransform_FieldTransform_ServerValue", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for DocumentTransform_FieldTransform_ServerValue {
}

impl ::std::default::Default for DocumentTransform_FieldTransform_ServerValue {
    fn default() -> Self {
        DocumentTransform_FieldTransform_ServerValue::SERVER_VALUE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentTransform_FieldTransform_ServerValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteResult {
    // message fields
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub transform_results: ::protobuf::RepeatedField<super::document::Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl WriteResult {
    pub fn new() -> WriteResult {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp update_time = 1;

    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }

    // repeated .google.firestore.v1beta1.Value transform_results = 2;

    pub fn clear_transform_results(&mut self) {
        self.transform_results.clear();
    }

    // Param is passed by value, moved
    pub fn set_transform_results(&mut self, v: ::protobuf::RepeatedField<super::document::Value>) {
        self.transform_results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transform_results(&mut self) -> &mut ::protobuf::RepeatedField<super::document::Value> {
        &mut self.transform_results
    }

    // Take field
    pub fn take_transform_results(&mut self) -> ::protobuf::RepeatedField<super::document::Value> {
        ::std::mem::replace(&mut self.transform_results, ::protobuf::RepeatedField::new())
    }

    pub fn get_transform_results(&self) -> &[super::document::Value] {
        &self.transform_results
    }
}

impl ::protobuf::Message for WriteResult {
    fn is_initialized(&self) -> bool {
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transform_results {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transform_results)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transform_results {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transform_results {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteResult {
        WriteResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "update_time",
                    |m: &WriteResult| { &m.update_time },
                    |m: &mut WriteResult| { &mut m.update_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::document::Value>>(
                    "transform_results",
                    |m: &WriteResult| { &m.transform_results },
                    |m: &mut WriteResult| { &mut m.transform_results },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<WriteResult>(
                    "WriteResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static WriteResult {
        static mut instance: ::protobuf::lazy::Lazy<WriteResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const WriteResult,
        };
        unsafe {
            instance.get(WriteResult::new)
        }
    }
}

impl ::protobuf::Clear for WriteResult {
    fn clear(&mut self) {
        self.clear_update_time();
        self.clear_transform_results();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DocumentChange {
    // message fields
    pub document: ::protobuf::SingularPtrField<super::document::Document>,
    pub target_ids: ::std::vec::Vec<i32>,
    pub removed_target_ids: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DocumentChange {
    pub fn new() -> DocumentChange {
        ::std::default::Default::default()
    }

    // .google.firestore.v1beta1.Document document = 1;

    pub fn clear_document(&mut self) {
        self.document.clear();
    }

    pub fn has_document(&self) -> bool {
        self.document.is_some()
    }

    // Param is passed by value, moved
    pub fn set_document(&mut self, v: super::document::Document) {
        self.document = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_document(&mut self) -> &mut super::document::Document {
        if self.document.is_none() {
            self.document.set_default();
        }
        self.document.as_mut().unwrap()
    }

    // Take field
    pub fn take_document(&mut self) -> super::document::Document {
        self.document.take().unwrap_or_else(|| super::document::Document::new())
    }

    pub fn get_document(&self) -> &super::document::Document {
        self.document.as_ref().unwrap_or_else(|| super::document::Document::default_instance())
    }

    // repeated int32 target_ids = 5;

    pub fn clear_target_ids(&mut self) {
        self.target_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_target_ids(&mut self, v: ::std::vec::Vec<i32>) {
        self.target_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_target_ids(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.target_ids
    }

    // Take field
    pub fn take_target_ids(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.target_ids, ::std::vec::Vec::new())
    }

    pub fn get_target_ids(&self) -> &[i32] {
        &self.target_ids
    }

    // repeated int32 removed_target_ids = 6;

    pub fn clear_removed_target_ids(&mut self) {
        self.removed_target_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_target_ids(&mut self, v: ::std::vec::Vec<i32>) {
        self.removed_target_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_target_ids(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.removed_target_ids
    }

    // Take field
    pub fn take_removed_target_ids(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.removed_target_ids, ::std::vec::Vec::new())
    }

    pub fn get_removed_target_ids(&self) -> &[i32] {
        &self.removed_target_ids
    }
}

impl ::protobuf::Message for DocumentChange {
    fn is_initialized(&self) -> bool {
        for v in &self.document {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.document)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.target_ids)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.removed_target_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.document.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.target_ids {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.removed_target_ids {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.document.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.target_ids {
            os.write_int32(5, *v)?;
        };
        for v in &self.removed_target_ids {
            os.write_int32(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DocumentChange {
        DocumentChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::document::Document>>(
                    "document",
                    |m: &DocumentChange| { &m.document },
                    |m: &mut DocumentChange| { &mut m.document },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "target_ids",
                    |m: &DocumentChange| { &m.target_ids },
                    |m: &mut DocumentChange| { &mut m.target_ids },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "removed_target_ids",
                    |m: &DocumentChange| { &m.removed_target_ids },
                    |m: &mut DocumentChange| { &mut m.removed_target_ids },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DocumentChange>(
                    "DocumentChange",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DocumentChange {
        static mut instance: ::protobuf::lazy::Lazy<DocumentChange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DocumentChange,
        };
        unsafe {
            instance.get(DocumentChange::new)
        }
    }
}

impl ::protobuf::Clear for DocumentChange {
    fn clear(&mut self) {
        self.clear_document();
        self.clear_target_ids();
        self.clear_removed_target_ids();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DocumentChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentChange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DocumentDelete {
    // message fields
    pub document: ::std::string::String,
    pub removed_target_ids: ::std::vec::Vec<i32>,
    pub read_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DocumentDelete {
    pub fn new() -> DocumentDelete {
        ::std::default::Default::default()
    }

    // string document = 1;

    pub fn clear_document(&mut self) {
        self.document.clear();
    }

    // Param is passed by value, moved
    pub fn set_document(&mut self, v: ::std::string::String) {
        self.document = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_document(&mut self) -> &mut ::std::string::String {
        &mut self.document
    }

    // Take field
    pub fn take_document(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.document, ::std::string::String::new())
    }

    pub fn get_document(&self) -> &str {
        &self.document
    }

    // repeated int32 removed_target_ids = 6;

    pub fn clear_removed_target_ids(&mut self) {
        self.removed_target_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_target_ids(&mut self, v: ::std::vec::Vec<i32>) {
        self.removed_target_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_target_ids(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.removed_target_ids
    }

    // Take field
    pub fn take_removed_target_ids(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.removed_target_ids, ::std::vec::Vec::new())
    }

    pub fn get_removed_target_ids(&self) -> &[i32] {
        &self.removed_target_ids
    }

    // .google.protobuf.Timestamp read_time = 4;

    pub fn clear_read_time(&mut self) {
        self.read_time.clear();
    }

    pub fn has_read_time(&self) -> bool {
        self.read_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.read_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.read_time.is_none() {
            self.read_time.set_default();
        }
        self.read_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.read_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    pub fn get_read_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.read_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
}

impl ::protobuf::Message for DocumentDelete {
    fn is_initialized(&self) -> bool {
        for v in &self.read_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.document)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.removed_target_ids)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.document.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.document);
        }
        for value in &self.removed_target_ids {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.read_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.document.is_empty() {
            os.write_string(1, &self.document)?;
        }
        for v in &self.removed_target_ids {
            os.write_int32(6, *v)?;
        };
        if let Some(ref v) = self.read_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DocumentDelete {
        DocumentDelete::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "document",
                    |m: &DocumentDelete| { &m.document },
                    |m: &mut DocumentDelete| { &mut m.document },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "removed_target_ids",
                    |m: &DocumentDelete| { &m.removed_target_ids },
                    |m: &mut DocumentDelete| { &mut m.removed_target_ids },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "read_time",
                    |m: &DocumentDelete| { &m.read_time },
                    |m: &mut DocumentDelete| { &mut m.read_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DocumentDelete>(
                    "DocumentDelete",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DocumentDelete {
        static mut instance: ::protobuf::lazy::Lazy<DocumentDelete> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DocumentDelete,
        };
        unsafe {
            instance.get(DocumentDelete::new)
        }
    }
}

impl ::protobuf::Clear for DocumentDelete {
    fn clear(&mut self) {
        self.clear_document();
        self.clear_removed_target_ids();
        self.clear_read_time();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DocumentDelete {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentDelete {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DocumentRemove {
    // message fields
    pub document: ::std::string::String,
    pub removed_target_ids: ::std::vec::Vec<i32>,
    pub read_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl DocumentRemove {
    pub fn new() -> DocumentRemove {
        ::std::default::Default::default()
    }

    // string document = 1;

    pub fn clear_document(&mut self) {
        self.document.clear();
    }

    // Param is passed by value, moved
    pub fn set_document(&mut self, v: ::std::string::String) {
        self.document = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_document(&mut self) -> &mut ::std::string::String {
        &mut self.document
    }

    // Take field
    pub fn take_document(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.document, ::std::string::String::new())
    }

    pub fn get_document(&self) -> &str {
        &self.document
    }

    // repeated int32 removed_target_ids = 2;

    pub fn clear_removed_target_ids(&mut self) {
        self.removed_target_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_target_ids(&mut self, v: ::std::vec::Vec<i32>) {
        self.removed_target_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_target_ids(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.removed_target_ids
    }

    // Take field
    pub fn take_removed_target_ids(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.removed_target_ids, ::std::vec::Vec::new())
    }

    pub fn get_removed_target_ids(&self) -> &[i32] {
        &self.removed_target_ids
    }

    // .google.protobuf.Timestamp read_time = 4;

    pub fn clear_read_time(&mut self) {
        self.read_time.clear();
    }

    pub fn has_read_time(&self) -> bool {
        self.read_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_read_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.read_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_read_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.read_time.is_none() {
            self.read_time.set_default();
        }
        self.read_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_read_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.read_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    pub fn get_read_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.read_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
}

impl ::protobuf::Message for DocumentRemove {
    fn is_initialized(&self) -> bool {
        for v in &self.read_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.document)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.removed_target_ids)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.read_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.document.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.document);
        }
        for value in &self.removed_target_ids {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.read_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.document.is_empty() {
            os.write_string(1, &self.document)?;
        }
        for v in &self.removed_target_ids {
            os.write_int32(2, *v)?;
        };
        if let Some(ref v) = self.read_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DocumentRemove {
        DocumentRemove::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "document",
                    |m: &DocumentRemove| { &m.document },
                    |m: &mut DocumentRemove| { &mut m.document },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "removed_target_ids",
                    |m: &DocumentRemove| { &m.removed_target_ids },
                    |m: &mut DocumentRemove| { &mut m.removed_target_ids },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "read_time",
                    |m: &DocumentRemove| { &m.read_time },
                    |m: &mut DocumentRemove| { &mut m.read_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DocumentRemove>(
                    "DocumentRemove",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DocumentRemove {
        static mut instance: ::protobuf::lazy::Lazy<DocumentRemove> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DocumentRemove,
        };
        unsafe {
            instance.get(DocumentRemove::new)
        }
    }
}

impl ::protobuf::Clear for DocumentRemove {
    fn clear(&mut self) {
        self.clear_document();
        self.clear_removed_target_ids();
        self.clear_read_time();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DocumentRemove {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DocumentRemove {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExistenceFilter {
    // message fields
    pub target_id: i32,
    pub count: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ExistenceFilter {
    pub fn new() -> ExistenceFilter {
        ::std::default::Default::default()
    }

    // int32 target_id = 1;

    pub fn clear_target_id(&mut self) {
        self.target_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_id(&mut self, v: i32) {
        self.target_id = v;
    }

    pub fn get_target_id(&self) -> i32 {
        self.target_id
    }

    // int32 count = 2;

    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i32) {
        self.count = v;
    }

    pub fn get_count(&self) -> i32 {
        self.count
    }
}

impl ::protobuf::Message for ExistenceFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.target_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.target_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.target_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.target_id != 0 {
            os.write_int32(1, self.target_id)?;
        }
        if self.count != 0 {
            os.write_int32(2, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExistenceFilter {
        ExistenceFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "target_id",
                    |m: &ExistenceFilter| { &m.target_id },
                    |m: &mut ExistenceFilter| { &mut m.target_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "count",
                    |m: &ExistenceFilter| { &m.count },
                    |m: &mut ExistenceFilter| { &mut m.count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExistenceFilter>(
                    "ExistenceFilter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExistenceFilter {
        static mut instance: ::protobuf::lazy::Lazy<ExistenceFilter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExistenceFilter,
        };
        unsafe {
            instance.get(ExistenceFilter::new)
        }
    }
}

impl ::protobuf::Clear for ExistenceFilter {
    fn clear(&mut self) {
        self.clear_target_id();
        self.clear_count();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExistenceFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExistenceFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$google/firestore/v1beta1/write.proto\x12\x18google.firestore.v1beta1\
    \x1a\x1cgoogle/api/annotations.proto\x1a%google/firestore/v1beta1/common\
    .proto\x1a'google/firestore/v1beta1/document.proto\x1a\x1fgoogle/protobu\
    f/timestamp.proto\"\xd5\x02\n\x05Write\x12<\n\x06update\x18\x01\x20\x01(\
    \x0b2\".google.firestore.v1beta1.DocumentH\0R\x06update\x12\x18\n\x06del\
    ete\x18\x02\x20\x01(\tH\0R\x06delete\x12K\n\ttransform\x18\x06\x20\x01(\
    \x0b2+.google.firestore.v1beta1.DocumentTransformH\0R\ttransform\x12G\n\
    \x0bupdate_mask\x18\x03\x20\x01(\x0b2&.google.firestore.v1beta1.Document\
    MaskR\nupdateMask\x12Q\n\x10current_document\x18\x04\x20\x01(\x0b2&.goog\
    le.firestore.v1beta1.PreconditionR\x0fcurrentDocumentB\x0b\n\toperation\
    \"\xcd\x04\n\x11DocumentTransform\x12\x1a\n\x08document\x18\x01\x20\x01(\
    \tR\x08document\x12e\n\x10field_transforms\x18\x02\x20\x03(\x0b2:.google\
    .firestore.v1beta1.DocumentTransform.FieldTransformR\x0ffieldTransforms\
    \x1a\xb4\x03\n\x0eFieldTransform\x12\x1d\n\nfield_path\x18\x01\x20\x01(\
    \tR\tfieldPath\x12w\n\x13set_to_server_value\x18\x02\x20\x01(\x0e2F.goog\
    le.firestore.v1beta1.DocumentTransform.FieldTransform.ServerValueH\0R\
    \x10setToServerValue\x12^\n\x17append_missing_elements\x18\x06\x20\x01(\
    \x0b2$.google.firestore.v1beta1.ArrayValueH\0R\x15appendMissingElements\
    \x12Y\n\x15remove_all_from_array\x18\x07\x20\x01(\x0b2$.google.firestore\
    .v1beta1.ArrayValueH\0R\x12removeAllFromArray\"=\n\x0bServerValue\x12\
    \x1c\n\x18SERVER_VALUE_UNSPECIFIED\x10\0\x12\x10\n\x0cREQUEST_TIME\x10\
    \x01B\x10\n\x0etransform_type\"\x98\x01\n\x0bWriteResult\x12;\n\x0bupdat\
    e_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nupdateTime\
    \x12L\n\x11transform_results\x18\x02\x20\x03(\x0b2\x1f.google.firestore.\
    v1beta1.ValueR\x10transformResults\"\x9d\x01\n\x0eDocumentChange\x12>\n\
    \x08document\x18\x01\x20\x01(\x0b2\".google.firestore.v1beta1.DocumentR\
    \x08document\x12\x1d\n\ntarget_ids\x18\x05\x20\x03(\x05R\ttargetIds\x12,\
    \n\x12removed_target_ids\x18\x06\x20\x03(\x05R\x10removedTargetIds\"\x93\
    \x01\n\x0eDocumentDelete\x12\x1a\n\x08document\x18\x01\x20\x01(\tR\x08do\
    cument\x12,\n\x12removed_target_ids\x18\x06\x20\x03(\x05R\x10removedTarg\
    etIds\x127\n\tread_time\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.Timest\
    ampR\x08readTime\"\x93\x01\n\x0eDocumentRemove\x12\x1a\n\x08document\x18\
    \x01\x20\x01(\tR\x08document\x12,\n\x12removed_target_ids\x18\x02\x20\
    \x03(\x05R\x10removedTargetIds\x127\n\tread_time\x18\x04\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\x08readTime\"D\n\x0fExistenceFilter\x12\
    \x1b\n\ttarget_id\x18\x01\x20\x01(\x05R\x08targetId\x12\x14\n\x05count\
    \x18\x02\x20\x01(\x05R\x05countB\xb8\x01\n\x1ccom.google.firestore.v1bet\
    a1B\nWriteProtoP\x01ZAgoogle.golang.org/genproto/googleapis/firestore/v1\
    beta1;firestore\xa2\x02\x04GCFS\xaa\x02\x1eGoogle.Cloud.Firestore.V1Beta\
    1\xca\x02\x1eGoogle\\Cloud\\Firestore\\V1beta1J\xf3D\n\x07\x12\x05\x0e\0\
    \xd5\x01\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb1\x04\x20Copyright\
    \x202018\x20Google\x20LLC\n\n\x20Licensed\x20under\x20the\x20Apache\x20L\
    icense,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20no\
    t\x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\
    \x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20Lice\
    nse\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-\
    2.0\n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\x08\
    \x20\n\t\n\x02\x03\0\x12\x03\x12\x07%\n\t\n\x02\x03\x01\x12\x03\x13\x07.\
    \n\t\n\x02\x03\x02\x12\x03\x14\x070\n\t\n\x02\x03\x03\x12\x03\x15\x07(\n\
    \x08\n\x01\x08\x12\x03\x17\0;\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x17\0;\n\
    \x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x17\x07\x17\n\r\n\x06\x08\xe7\x07\0\
    \x02\0\x12\x03\x17\x07\x17\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\
    \x17\x07\x17\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x17\x1a:\n\x08\n\x01\
    \x08\x12\x03\x18\0X\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x18\0X\n\x0c\n\
    \x05\x08\xe7\x07\x01\x02\x12\x03\x18\x07\x11\n\r\n\x06\x08\xe7\x07\x01\
    \x02\0\x12\x03\x18\x07\x11\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\
    \x18\x07\x11\n\x0c\n\x05\x08\xe7\x07\x01\x07\x12\x03\x18\x14W\n\x08\n\
    \x01\x08\x12\x03\x19\0\"\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x19\0\"\n\
    \x0c\n\x05\x08\xe7\x07\x02\x02\x12\x03\x19\x07\x1a\n\r\n\x06\x08\xe7\x07\
    \x02\x02\0\x12\x03\x19\x07\x1a\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\
    \x03\x19\x07\x1a\n\x0c\n\x05\x08\xe7\x07\x02\x03\x12\x03\x19\x1d!\n\x08\
    \n\x01\x08\x12\x03\x1a\0+\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\x1a\0+\n\
    \x0c\n\x05\x08\xe7\x07\x03\x02\x12\x03\x1a\x07\x1b\n\r\n\x06\x08\xe7\x07\
    \x03\x02\0\x12\x03\x1a\x07\x1b\n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\
    \x03\x1a\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x03\x07\x12\x03\x1a\x1e*\n\x08\
    \n\x01\x08\x12\x03\x1b\05\n\x0b\n\x04\x08\xe7\x07\x04\x12\x03\x1b\05\n\
    \x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\x1b\x07\x13\n\r\n\x06\x08\xe7\x07\
    \x04\x02\0\x12\x03\x1b\x07\x13\n\x0e\n\x07\x08\xe7\x07\x04\x02\0\x01\x12\
    \x03\x1b\x07\x13\n\x0c\n\x05\x08\xe7\x07\x04\x07\x12\x03\x1b\x164\n\x08\
    \n\x01\x08\x12\x03\x1c\0\"\n\x0b\n\x04\x08\xe7\x07\x05\x12\x03\x1c\0\"\n\
    \x0c\n\x05\x08\xe7\x07\x05\x02\x12\x03\x1c\x07\x18\n\r\n\x06\x08\xe7\x07\
    \x05\x02\0\x12\x03\x1c\x07\x18\n\x0e\n\x07\x08\xe7\x07\x05\x02\0\x01\x12\
    \x03\x1c\x07\x18\n\x0c\n\x05\x08\xe7\x07\x05\x07\x12\x03\x1c\x1b!\n\x08\
    \n\x01\x08\x12\x03\x1d\0;\n\x0b\n\x04\x08\xe7\x07\x06\x12\x03\x1d\0;\n\
    \x0c\n\x05\x08\xe7\x07\x06\x02\x12\x03\x1d\x07\x14\n\r\n\x06\x08\xe7\x07\
    \x06\x02\0\x12\x03\x1d\x07\x14\n\x0e\n\x07\x08\xe7\x07\x06\x02\0\x01\x12\
    \x03\x1d\x07\x14\n\x0c\n\x05\x08\xe7\x07\x06\x07\x12\x03\x1d\x17:\n$\n\
    \x02\x04\0\x12\x04!\0B\x01\x1a\x18\x20A\x20write\x20on\x20a\x20document.\
    \n\n\n\n\x03\x04\0\x01\x12\x03!\x08\r\n)\n\x04\x04\0\x08\0\x12\x04#\x020\
    \x03\x1a\x1b\x20The\x20operation\x20to\x20execute.\n\n\x0c\n\x05\x04\0\
    \x08\0\x01\x12\x03#\x08\x11\n#\n\x04\x04\0\x02\0\x12\x03%\x04\x18\x1a\
    \x16\x20A\x20document\x20to\x20write.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03%\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03%\r\x13\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03%\x16\x17\n\x84\x01\n\x04\x04\0\x02\x01\x12\x03)\x04\
    \x16\x1aw\x20A\x20document\x20name\x20to\x20delete.\x20In\x20the\x20form\
    at:\n\x20`projects/{project_id}/databases/{database_id}/documents/{docum\
    ent_path}`.\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03)\x04\n\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03)\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03)\x14\x15\n\xce\x01\n\x04\x04\0\x02\x02\x12\x03/\x04$\x1a\xc0\x01\
    \x20Applies\x20a\x20tranformation\x20to\x20a\x20document.\n\x20At\x20mos\
    t\x20one\x20`transform`\x20per\x20document\x20is\x20allowed\x20in\x20a\
    \x20given\x20request.\n\x20An\x20`update`\x20cannot\x20follow\x20a\x20`t\
    ransform`\x20on\x20the\x20same\x20document\x20in\x20a\x20given\n\x20requ\
    est.\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03/\x04\x15\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03/\x16\x1f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03/\"#\
    \n\x85\x04\n\x04\x04\0\x02\x03\x12\x03<\x02\x1f\x1a\xf7\x03\x20The\x20fi\
    elds\x20to\x20update\x20in\x20this\x20write.\n\n\x20This\x20field\x20can\
    \x20be\x20set\x20only\x20when\x20the\x20operation\x20is\x20`update`.\n\
    \x20If\x20the\x20mask\x20is\x20not\x20set\x20for\x20an\x20`update`\x20an\
    d\x20the\x20document\x20exists,\x20any\n\x20existing\x20data\x20will\x20\
    be\x20overwritten.\n\x20If\x20the\x20mask\x20is\x20set\x20and\x20the\x20\
    document\x20on\x20the\x20server\x20has\x20fields\x20not\x20covered\x20by\
    \n\x20the\x20mask,\x20they\x20are\x20left\x20unchanged.\n\x20Fields\x20r\
    eferenced\x20in\x20the\x20mask,\x20but\x20not\x20present\x20in\x20the\
    \x20input\x20document,\x20are\n\x20deleted\x20from\x20the\x20document\
    \x20on\x20the\x20server.\n\x20The\x20field\x20paths\x20in\x20this\x20mas\
    k\x20must\x20not\x20contain\x20a\x20reserved\x20field\x20name.\n\n\r\n\
    \x05\x04\0\x02\x03\x04\x12\x04<\x020\x03\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03<\x02\x0e\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03<\x0f\x1a\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03<\x1d\x1e\n\x81\x01\n\x04\x04\0\x02\x04\
    \x12\x03A\x02$\x1at\x20An\x20optional\x20precondition\x20on\x20the\x20do\
    cument.\n\n\x20The\x20write\x20will\x20fail\x20if\x20this\x20is\x20set\
    \x20and\x20not\x20met\x20by\x20the\x20target\x20document.\n\n\r\n\x05\
    \x04\0\x02\x04\x04\x12\x04A\x02<\x1f\n\x0c\n\x05\x04\0\x02\x04\x06\x12\
    \x03A\x02\x0e\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03A\x0f\x1f\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03A\"#\n-\n\x02\x04\x01\x12\x04E\0~\x01\x1a!\x20\
    A\x20transformation\x20of\x20a\x20document.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03E\x08\x19\n<\n\x04\x04\x01\x03\0\x12\x04G\x02u\x03\x1a.\x20A\x20tran\
    sformation\x20of\x20a\x20field\x20of\x20the\x20document.\n\n\x0c\n\x05\
    \x04\x01\x03\0\x01\x12\x03G\n\x18\n;\n\x06\x04\x01\x03\0\x04\0\x12\x04I\
    \x04P\x05\x1a+\x20A\x20value\x20that\x20is\x20calculated\x20by\x20the\
    \x20server.\n\n\x0e\n\x07\x04\x01\x03\0\x04\0\x01\x12\x03I\t\x14\n<\n\
    \x08\x04\x01\x03\0\x04\0\x02\0\x12\x03K\x06#\x1a+\x20Unspecified.\x20Thi\
    s\x20value\x20must\x20not\x20be\x20used.\n\n\x10\n\t\x04\x01\x03\0\x04\0\
    \x02\0\x01\x12\x03K\x06\x1e\n\x10\n\t\x04\x01\x03\0\x04\0\x02\0\x02\x12\
    \x03K!\"\nc\n\x08\x04\x01\x03\0\x04\0\x02\x01\x12\x03O\x06\x17\x1aR\x20T\
    he\x20time\x20at\x20which\x20the\x20server\x20processed\x20the\x20reques\
    t,\x20with\x20millisecond\n\x20precision.\n\n\x10\n\t\x04\x01\x03\0\x04\
    \0\x02\x01\x01\x12\x03O\x06\x12\n\x10\n\t\x04\x01\x03\0\x04\0\x02\x01\
    \x02\x12\x03O\x15\x16\n\x8d\x01\n\x06\x04\x01\x03\0\x02\0\x12\x03T\x04\
    \x1a\x1a~\x20The\x20path\x20of\x20the\x20field.\x20See\x20[Document.fiel\
    ds][google.firestore.v1beta1.Document.fields]\x20for\x20the\x20field\x20\
    path\x20syntax\n\x20reference.\n\n\x0f\n\x07\x04\x01\x03\0\x02\0\x04\x12\
    \x04T\x04P\x05\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03T\x04\n\n\x0e\
    \n\x07\x04\x01\x03\0\x02\0\x01\x12\x03T\x0b\x15\n\x0e\n\x07\x04\x01\x03\
    \0\x02\0\x03\x12\x03T\x18\x19\n;\n\x06\x04\x01\x03\0\x08\0\x12\x04W\x04t\
    \x05\x1a+\x20The\x20transformation\x20to\x20apply\x20on\x20the\x20field.\
    \n\n\x0e\n\x07\x04\x01\x03\0\x08\0\x01\x12\x03W\n\x18\n:\n\x06\x04\x01\
    \x03\0\x02\x01\x12\x03Y\x06*\x1a+\x20Sets\x20the\x20field\x20to\x20the\
    \x20given\x20server\x20value.\n\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x06\
    \x12\x03Y\x06\x11\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\x03Y\x12%\n\
    \x0e\n\x07\x04\x01\x03\0\x02\x01\x03\x12\x03Y()\n\x93\x04\n\x06\x04\x01\
    \x03\0\x02\x02\x12\x03g\x06-\x1a\x83\x04\x20Append\x20the\x20given\x20el\
    ements\x20in\x20order\x20if\x20they\x20are\x20not\x20already\x20present\
    \x20in\n\x20the\x20current\x20field\x20value.\n\x20If\x20the\x20field\
    \x20is\x20not\x20an\x20array,\x20or\x20if\x20the\x20field\x20does\x20not\
    \x20yet\x20exist,\x20it\x20is\n\x20first\x20set\x20to\x20the\x20empty\
    \x20array.\n\n\x20Equivalent\x20numbers\x20of\x20different\x20types\x20(\
    e.g.\x203L\x20and\x203.0)\x20are\n\x20considered\x20equal\x20when\x20che\
    cking\x20if\x20a\x20value\x20is\x20missing.\n\x20NaN\x20is\x20equal\x20t\
    o\x20NaN,\x20and\x20Null\x20is\x20equal\x20to\x20Null.\n\x20If\x20the\
    \x20input\x20contains\x20multiple\x20equivalent\x20values,\x20only\x20th\
    e\x20first\x20will\n\x20be\x20considered.\n\n\x20The\x20corresponding\
    \x20transform_result\x20will\x20be\x20the\x20null\x20value.\n\n\x0e\n\
    \x07\x04\x01\x03\0\x02\x02\x06\x12\x03g\x06\x10\n\x0e\n\x07\x04\x01\x03\
    \0\x02\x02\x01\x12\x03g\x11(\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x03\x12\
    \x03g+,\n\xe8\x03\n\x06\x04\x01\x03\0\x02\x03\x12\x03s\x06+\x1a\xd8\x03\
    \x20Remove\x20all\x20of\x20the\x20given\x20elements\x20from\x20the\x20ar\
    ray\x20in\x20the\x20field.\n\x20If\x20the\x20field\x20is\x20not\x20an\
    \x20array,\x20or\x20if\x20the\x20field\x20does\x20not\x20yet\x20exist,\
    \x20it\x20is\n\x20set\x20to\x20the\x20empty\x20array.\n\n\x20Equivalent\
    \x20numbers\x20of\x20the\x20different\x20types\x20(e.g.\x203L\x20and\x20\
    3.0)\x20are\n\x20considered\x20equal\x20when\x20deciding\x20whether\x20a\
    n\x20element\x20should\x20be\x20removed.\n\x20NaN\x20is\x20equal\x20to\
    \x20NaN,\x20and\x20Null\x20is\x20equal\x20to\x20Null.\n\x20This\x20will\
    \x20remove\x20all\x20equivalent\x20values\x20if\x20there\x20are\x20dupli\
    cates.\n\n\x20The\x20corresponding\x20transform_result\x20will\x20be\x20\
    the\x20null\x20value.\n\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x06\x12\x03s\
    \x06\x10\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x01\x12\x03s\x11&\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x03\x03\x12\x03s)*\n5\n\x04\x04\x01\x02\0\x12\x03x\
    \x02\x16\x1a(\x20The\x20name\x20of\x20the\x20document\x20to\x20transform\
    .\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04x\x02u\x03\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03x\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03x\t\x11\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03x\x14\x15\nv\n\x04\x04\x01\x02\x01\
    \x12\x03}\x02/\x1ai\x20The\x20list\x20of\x20transformations\x20to\x20app\
    ly\x20to\x20the\x20fields\x20of\x20the\x20document,\x20in\n\x20order.\n\
    \x20This\x20must\x20not\x20be\x20empty.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x04\x12\x03}\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03}\x0b\x19\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03}\x1a*\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03}-.\n/\n\x02\x04\x02\x12\x06\x81\x01\0\x8c\x01\x01\x1a!\x20T\
    he\x20result\x20of\x20applying\x20a\x20write.\n\n\x0b\n\x03\x04\x02\x01\
    \x12\x04\x81\x01\x08\x13\n\xc7\x01\n\x04\x04\x02\x02\0\x12\x04\x87\x01\
    \x02,\x1a\xb8\x01\x20The\x20last\x20update\x20time\x20of\x20the\x20docum\
    ent\x20after\x20applying\x20the\x20write.\x20Not\x20set\n\x20after\x20a\
    \x20`delete`.\n\n\x20If\x20the\x20write\x20did\x20not\x20actually\x20cha\
    nge\x20the\x20document,\x20this\x20will\x20be\x20the\n\x20previous\x20up\
    date_time.\n\n\x0f\n\x05\x04\x02\x02\0\x04\x12\x06\x87\x01\x02\x81\x01\
    \x15\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\x87\x01\x02\x1b\n\r\n\x05\x04\
    \x02\x02\0\x01\x12\x04\x87\x01\x1c'\n\r\n\x05\x04\x02\x02\0\x03\x12\x04\
    \x87\x01*+\n\xa0\x01\n\x04\x04\x02\x02\x01\x12\x04\x8b\x01\x02'\x1a\x91\
    \x01\x20The\x20results\x20of\x20applying\x20each\x20[DocumentTransform.F\
    ieldTransform][google.firestore.v1beta1.DocumentTransform.FieldTransform\
    ],\x20in\x20the\n\x20same\x20order.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\
    \x04\x8b\x01\x02\n\n\r\n\x05\x04\x02\x02\x01\x06\x12\x04\x8b\x01\x0b\x10\
    \n\r\n\x05\x04\x02\x02\x01\x01\x12\x04\x8b\x01\x11\"\n\r\n\x05\x04\x02\
    \x02\x01\x03\x12\x04\x8b\x01%&\n\xa8\x03\n\x02\x04\x03\x12\x06\x95\x01\0\
    \xa0\x01\x01\x1a\x99\x03\x20A\x20[Document][google.firestore.v1beta1.Doc\
    ument]\x20has\x20changed.\n\n\x20May\x20be\x20the\x20result\x20of\x20mul\
    tiple\x20[writes][google.firestore.v1beta1.Write],\x20including\x20delet\
    es,\x20that\n\x20ultimately\x20resulted\x20in\x20a\x20new\x20value\x20fo\
    r\x20the\x20[Document][google.firestore.v1beta1.Document].\n\n\x20Multip\
    le\x20[DocumentChange][google.firestore.v1beta1.DocumentChange]\x20messa\
    ges\x20may\x20be\x20returned\x20for\x20the\x20same\x20logical\n\x20chang\
    e,\x20if\x20multiple\x20targets\x20are\x20affected.\n\n\x0b\n\x03\x04\
    \x03\x01\x12\x04\x95\x01\x08\x16\n\x99\x01\n\x04\x04\x03\x02\0\x12\x04\
    \x99\x01\x02\x18\x1a\x8a\x01\x20The\x20new\x20state\x20of\x20the\x20[Doc\
    ument][google.firestore.v1beta1.Document].\n\n\x20If\x20`mask`\x20is\x20\
    set,\x20contains\x20only\x20fields\x20that\x20were\x20updated\x20or\x20a\
    dded.\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\x99\x01\x02\x95\x01\x18\n\
    \r\n\x05\x04\x03\x02\0\x06\x12\x04\x99\x01\x02\n\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\x99\x01\x0b\x13\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x99\x01\
    \x16\x17\nH\n\x04\x04\x03\x02\x01\x12\x04\x9c\x01\x02\x20\x1a:\x20A\x20s\
    et\x20of\x20target\x20IDs\x20of\x20targets\x20that\x20match\x20this\x20d\
    ocument.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x9c\x01\x02\n\n\r\n\x05\
    \x04\x03\x02\x01\x05\x12\x04\x9c\x01\x0b\x10\n\r\n\x05\x04\x03\x02\x01\
    \x01\x12\x04\x9c\x01\x11\x1b\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\x9c\
    \x01\x1e\x1f\nS\n\x04\x04\x03\x02\x02\x12\x04\x9f\x01\x02(\x1aE\x20A\x20\
    set\x20of\x20target\x20IDs\x20for\x20targets\x20that\x20no\x20longer\x20\
    match\x20this\x20document.\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\x9f\
    \x01\x02\n\n\r\n\x05\x04\x03\x02\x02\x05\x12\x04\x9f\x01\x0b\x10\n\r\n\
    \x05\x04\x03\x02\x02\x01\x12\x04\x9f\x01\x11#\n\r\n\x05\x04\x03\x02\x02\
    \x03\x12\x04\x9f\x01&'\n\x9b\x03\n\x02\x04\x04\x12\x06\xa9\x01\0\xb4\x01\
    \x01\x1a\x8c\x03\x20A\x20[Document][google.firestore.v1beta1.Document]\
    \x20has\x20been\x20deleted.\n\n\x20May\x20be\x20the\x20result\x20of\x20m\
    ultiple\x20[writes][google.firestore.v1beta1.Write],\x20including\x20upd\
    ates,\x20the\n\x20last\x20of\x20which\x20deleted\x20the\x20[Document][go\
    ogle.firestore.v1beta1.Document].\n\n\x20Multiple\x20[DocumentDelete][go\
    ogle.firestore.v1beta1.DocumentDelete]\x20messages\x20may\x20be\x20retur\
    ned\x20for\x20the\x20same\x20logical\n\x20delete,\x20if\x20multiple\x20t\
    argets\x20are\x20affected.\n\n\x0b\n\x03\x04\x04\x01\x12\x04\xa9\x01\x08\
    \x16\nh\n\x04\x04\x04\x02\0\x12\x04\xab\x01\x02\x16\x1aZ\x20The\x20resou\
    rce\x20name\x20of\x20the\x20[Document][google.firestore.v1beta1.Document\
    ]\x20that\x20was\x20deleted.\n\n\x0f\n\x05\x04\x04\x02\0\x04\x12\x06\xab\
    \x01\x02\xa9\x01\x18\n\r\n\x05\x04\x04\x02\0\x05\x12\x04\xab\x01\x02\x08\
    \n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xab\x01\t\x11\n\r\n\x05\x04\x04\x02\
    \0\x03\x12\x04\xab\x01\x14\x15\nT\n\x04\x04\x04\x02\x01\x12\x04\xae\x01\
    \x02(\x1aF\x20A\x20set\x20of\x20target\x20IDs\x20for\x20targets\x20that\
    \x20previously\x20matched\x20this\x20entity.\n\n\r\n\x05\x04\x04\x02\x01\
    \x04\x12\x04\xae\x01\x02\n\n\r\n\x05\x04\x04\x02\x01\x05\x12\x04\xae\x01\
    \x0b\x10\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xae\x01\x11#\n\r\n\x05\
    \x04\x04\x02\x01\x03\x12\x04\xae\x01&'\n{\n\x04\x04\x04\x02\x02\x12\x04\
    \xb3\x01\x02*\x1am\x20The\x20read\x20timestamp\x20at\x20which\x20the\x20\
    delete\x20was\x20observed.\n\n\x20Greater\x20or\x20equal\x20to\x20the\
    \x20`commit_time`\x20of\x20the\x20delete.\n\n\x0f\n\x05\x04\x04\x02\x02\
    \x04\x12\x06\xb3\x01\x02\xae\x01(\n\r\n\x05\x04\x04\x02\x02\x06\x12\x04\
    \xb3\x01\x02\x1b\n\r\n\x05\x04\x04\x02\x02\x01\x12\x04\xb3\x01\x1c%\n\r\
    \n\x05\x04\x04\x02\x02\x03\x12\x04\xb3\x01()\n\xdb\x03\n\x02\x04\x05\x12\
    \x06\xbe\x01\0\xc9\x01\x01\x1a\xcc\x03\x20A\x20[Document][google.firesto\
    re.v1beta1.Document]\x20has\x20been\x20removed\x20from\x20the\x20view\
    \x20of\x20the\x20targets.\n\n\x20Sent\x20if\x20the\x20document\x20is\x20\
    no\x20longer\x20relevant\x20to\x20a\x20target\x20and\x20is\x20out\x20of\
    \x20view.\n\x20Can\x20be\x20sent\x20instead\x20of\x20a\x20DocumentDelete\
    \x20or\x20a\x20DocumentChange\x20if\x20the\x20server\n\x20can\x20not\x20\
    send\x20the\x20new\x20value\x20of\x20the\x20document.\n\n\x20Multiple\
    \x20[DocumentRemove][google.firestore.v1beta1.DocumentRemove]\x20message\
    s\x20may\x20be\x20returned\x20for\x20the\x20same\x20logical\n\x20write\
    \x20or\x20delete,\x20if\x20multiple\x20targets\x20are\x20affected.\n\n\
    \x0b\n\x03\x04\x05\x01\x12\x04\xbe\x01\x08\x16\nq\n\x04\x04\x05\x02\0\
    \x12\x04\xc0\x01\x02\x16\x1ac\x20The\x20resource\x20name\x20of\x20the\
    \x20[Document][google.firestore.v1beta1.Document]\x20that\x20has\x20gone\
    \x20out\x20of\x20view.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\x06\xc0\x01\
    \x02\xbe\x01\x18\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\xc0\x01\x02\x08\n\r\
    \n\x05\x04\x05\x02\0\x01\x12\x04\xc0\x01\t\x11\n\r\n\x05\x04\x05\x02\0\
    \x03\x12\x04\xc0\x01\x14\x15\nV\n\x04\x04\x05\x02\x01\x12\x04\xc3\x01\
    \x02(\x1aH\x20A\x20set\x20of\x20target\x20IDs\x20for\x20targets\x20that\
    \x20previously\x20matched\x20this\x20document.\n\n\r\n\x05\x04\x05\x02\
    \x01\x04\x12\x04\xc3\x01\x02\n\n\r\n\x05\x04\x05\x02\x01\x05\x12\x04\xc3\
    \x01\x0b\x10\n\r\n\x05\x04\x05\x02\x01\x01\x12\x04\xc3\x01\x11#\n\r\n\
    \x05\x04\x05\x02\x01\x03\x12\x04\xc3\x01&'\n\x89\x01\n\x04\x04\x05\x02\
    \x02\x12\x04\xc8\x01\x02*\x1a{\x20The\x20read\x20timestamp\x20at\x20whic\
    h\x20the\x20remove\x20was\x20observed.\n\n\x20Greater\x20or\x20equal\x20\
    to\x20the\x20`commit_time`\x20of\x20the\x20change/delete/remove.\n\n\x0f\
    \n\x05\x04\x05\x02\x02\x04\x12\x06\xc8\x01\x02\xc3\x01(\n\r\n\x05\x04\
    \x05\x02\x02\x06\x12\x04\xc8\x01\x02\x1b\n\r\n\x05\x04\x05\x02\x02\x01\
    \x12\x04\xc8\x01\x1c%\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\xc8\x01()\nH\
    \n\x02\x04\x06\x12\x06\xcc\x01\0\xd5\x01\x01\x1a:\x20A\x20digest\x20of\
    \x20all\x20the\x20documents\x20that\x20match\x20a\x20given\x20target.\n\
    \n\x0b\n\x03\x04\x06\x01\x12\x04\xcc\x01\x08\x17\n;\n\x04\x04\x06\x02\0\
    \x12\x04\xce\x01\x02\x16\x1a-\x20The\x20target\x20ID\x20to\x20which\x20t\
    his\x20filter\x20applies.\n\n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\xce\
    \x01\x02\xcc\x01\x19\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\xce\x01\x02\x07\
    \n\r\n\x05\x04\x06\x02\0\x01\x12\x04\xce\x01\x08\x11\n\r\n\x05\x04\x06\
    \x02\0\x03\x12\x04\xce\x01\x14\x15\n\x8e\x02\n\x04\x04\x06\x02\x01\x12\
    \x04\xd4\x01\x02\x12\x1a\xff\x01\x20The\x20total\x20count\x20of\x20docum\
    ents\x20that\x20match\x20[target_id][google.firestore.v1beta1.ExistenceF\
    ilter.target_id].\n\n\x20If\x20different\x20from\x20the\x20count\x20of\
    \x20documents\x20in\x20the\x20client\x20that\x20match,\x20the\n\x20clien\
    t\x20must\x20manually\x20determine\x20which\x20documents\x20no\x20longer\
    \x20match\x20the\x20target.\n\n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\
    \xd4\x01\x02\xce\x01\x16\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\xd4\x01\
    \x02\x07\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\xd4\x01\x08\r\n\r\n\x05\
    \x04\x06\x02\x01\x03\x12\x04\xd4\x01\x10\x11b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
