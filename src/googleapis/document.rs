// This file is generated by rust-protobuf 2.1.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Document {
    // message fields
    pub name: ::std::string::String,
    pub fields: ::std::collections::HashMap<::std::string::String, Value>,
    pub create_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub update_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Document {
    pub fn new() -> Document {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // repeated .google.firestore.v1beta1.Document.FieldsEntry fields = 2;

    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::std::collections::HashMap<::std::string::String, Value>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Value> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::std::collections::HashMap<::std::string::String, Value> {
        ::std::mem::replace(&mut self.fields, ::std::collections::HashMap::new())
    }

    pub fn get_fields(&self) -> &::std::collections::HashMap<::std::string::String, Value> {
        &self.fields
    }

    // .google.protobuf.Timestamp create_time = 3;

    pub fn clear_create_time(&mut self) {
        self.create_time.clear();
    }

    pub fn has_create_time(&self) -> bool {
        self.create_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.create_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.create_time.is_none() {
            self.create_time.set_default();
        }
        self.create_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.create_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    pub fn get_create_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.create_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }

    // .google.protobuf.Timestamp update_time = 4;

    pub fn clear_update_time(&mut self) {
        self.update_time.clear();
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.update_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.update_time.is_none() {
            self.update_time.set_default();
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.update_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    pub fn get_update_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.update_time.as_ref().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::default_instance())
    }
}

impl ::protobuf::Message for Document {
    fn is_initialized(&self) -> bool {
        for v in &self.create_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(wire_type, is, &mut self.fields)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(2, &self.fields);
        if let Some(ref v) = self.create_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(2, &self.fields, os)?;
        if let Some(ref v) = self.create_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Document {
        Document::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Document| { &m.name },
                    |m: &mut Document| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(
                    "fields",
                    |m: &Document| { &m.fields },
                    |m: &mut Document| { &mut m.fields },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "create_time",
                    |m: &Document| { &m.create_time },
                    |m: &mut Document| { &mut m.create_time },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                    "update_time",
                    |m: &Document| { &m.update_time },
                    |m: &mut Document| { &mut m.update_time },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Document>(
                    "Document",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Document {
        static mut instance: ::protobuf::lazy::Lazy<Document> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Document,
        };
        unsafe {
            instance.get(Document::new)
        }
    }
}

impl ::protobuf::Clear for Document {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_fields();
        self.clear_create_time();
        self.clear_update_time();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Document {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Document {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Value {
    // message oneof groups
    pub value_type: ::std::option::Option<Value_oneof_value_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Value_oneof_value_type {
    null_value(::protobuf::well_known_types::NullValue),
    boolean_value(bool),
    integer_value(i64),
    double_value(f64),
    timestamp_value(::protobuf::well_known_types::Timestamp),
    string_value(::std::string::String),
    bytes_value(::std::vec::Vec<u8>),
    reference_value(::std::string::String),
    geo_point_value(super::latlng::LatLng),
    array_value(ArrayValue),
    map_value(MapValue),
}

impl Value {
    pub fn new() -> Value {
        ::std::default::Default::default()
    }

    // .google.protobuf.NullValue null_value = 11;

    pub fn clear_null_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_null_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::null_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_null_value(&mut self, v: ::protobuf::well_known_types::NullValue) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::null_value(v))
    }

    pub fn get_null_value(&self) -> ::protobuf::well_known_types::NullValue {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::null_value(v)) => v,
            _ => super::struct_pb::NullValue::NULL_VALUE,
        }
    }

    // bool boolean_value = 1;

    pub fn clear_boolean_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_boolean_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::boolean_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boolean_value(&mut self, v: bool) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::boolean_value(v))
    }

    pub fn get_boolean_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::boolean_value(v)) => v,
            _ => false,
        }
    }

    // int64 integer_value = 2;

    pub fn clear_integer_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_integer_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::integer_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_integer_value(&mut self, v: i64) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::integer_value(v))
    }

    pub fn get_integer_value(&self) -> i64 {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::integer_value(v)) => v,
            _ => 0,
        }
    }

    // double double_value = 3;

    pub fn clear_double_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::double_value(v))
    }

    pub fn get_double_value(&self) -> f64 {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::double_value(v)) => v,
            _ => 0.,
        }
    }

    // .google.protobuf.Timestamp timestamp_value = 10;

    pub fn clear_timestamp_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_timestamp_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp_value(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp_value(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp_value(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_timestamp_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }

    pub fn get_timestamp_value(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(ref v)) => v,
            _ => ::protobuf::well_known_types::Timestamp::default_instance(),
        }
    }

    // string string_value = 17;

    pub fn clear_string_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Value_oneof_value_type::string_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(::std::string::String::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_string_value(&self) -> &str {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(ref v)) => v,
            _ => "",
        }
    }

    // bytes bytes_value = 18;

    pub fn clear_bytes_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_bytes_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::bytes_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::bytes_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Value_oneof_value_type::bytes_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::bytes_value(::std::vec::Vec::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::bytes_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_bytes_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::bytes_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    pub fn get_bytes_value(&self) -> &[u8] {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::bytes_value(ref v)) => v,
            _ => &[],
        }
    }

    // string reference_value = 5;

    pub fn clear_reference_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_reference_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::reference_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reference_value(&mut self, v: ::std::string::String) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::reference_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reference_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Value_oneof_value_type::reference_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::reference_value(::std::string::String::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::reference_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reference_value(&mut self) -> ::std::string::String {
        if self.has_reference_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::reference_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    pub fn get_reference_value(&self) -> &str {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::reference_value(ref v)) => v,
            _ => "",
        }
    }

    // .google.type.LatLng geo_point_value = 8;

    pub fn clear_geo_point_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_geo_point_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_geo_point_value(&mut self, v: super::latlng::LatLng) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_geo_point_value(&mut self) -> &mut super::latlng::LatLng {
        if let ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(super::latlng::LatLng::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_geo_point_value(&mut self) -> super::latlng::LatLng {
        if self.has_geo_point_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(v)) => v,
                _ => panic!(),
            }
        } else {
            super::latlng::LatLng::new()
        }
    }

    pub fn get_geo_point_value(&self) -> &super::latlng::LatLng {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(ref v)) => v,
            _ => super::latlng::LatLng::default_instance(),
        }
    }

    // .google.firestore.v1beta1.ArrayValue array_value = 9;

    pub fn clear_array_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_array_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_array_value(&mut self, v: ArrayValue) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_array_value(&mut self) -> &mut ArrayValue {
        if let ::std::option::Option::Some(Value_oneof_value_type::array_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(ArrayValue::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_array_value(&mut self) -> ArrayValue {
        if self.has_array_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::array_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ArrayValue::new()
        }
    }

    pub fn get_array_value(&self) -> &ArrayValue {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(ref v)) => v,
            _ => ArrayValue::default_instance(),
        }
    }

    // .google.firestore.v1beta1.MapValue map_value = 6;

    pub fn clear_map_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_map_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::map_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_map_value(&mut self, v: MapValue) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::map_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_map_value(&mut self) -> &mut MapValue {
        if let ::std::option::Option::Some(Value_oneof_value_type::map_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::map_value(MapValue::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::map_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_map_value(&mut self) -> MapValue {
        if self.has_map_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::map_value(v)) => v,
                _ => panic!(),
            }
        } else {
            MapValue::new()
        }
    }

    pub fn get_map_value(&self) -> &MapValue {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::map_value(ref v)) => v,
            _ => MapValue::default_instance(),
        }
    }
}

impl ::protobuf::Message for Value {
    fn is_initialized(&self) -> bool {
        if let Some(Value_oneof_value_type::timestamp_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Value_oneof_value_type::geo_point_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Value_oneof_value_type::array_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Value_oneof_value_type::map_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::null_value(is.read_enum()?));
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::boolean_value(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::integer_value(is.read_int64()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::double_value(is.read_double()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(is.read_string()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::bytes_value(is.read_bytes()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::reference_value(is.read_string()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::geo_point_value(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::map_value(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Value_oneof_value_type::null_value(v) => {
                    my_size += ::protobuf::rt::enum_size(11, v);
                },
                &Value_oneof_value_type::boolean_value(v) => {
                    my_size += 2;
                },
                &Value_oneof_value_type::integer_value(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Value_oneof_value_type::double_value(v) => {
                    my_size += 9;
                },
                &Value_oneof_value_type::timestamp_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(17, &v);
                },
                &Value_oneof_value_type::bytes_value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(18, &v);
                },
                &Value_oneof_value_type::reference_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &Value_oneof_value_type::geo_point_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::array_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::map_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Value_oneof_value_type::null_value(v) => {
                    os.write_enum(11, v.value())?;
                },
                &Value_oneof_value_type::boolean_value(v) => {
                    os.write_bool(1, v)?;
                },
                &Value_oneof_value_type::integer_value(v) => {
                    os.write_int64(2, v)?;
                },
                &Value_oneof_value_type::double_value(v) => {
                    os.write_double(3, v)?;
                },
                &Value_oneof_value_type::timestamp_value(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::string_value(ref v) => {
                    os.write_string(17, v)?;
                },
                &Value_oneof_value_type::bytes_value(ref v) => {
                    os.write_bytes(18, v)?;
                },
                &Value_oneof_value_type::reference_value(ref v) => {
                    os.write_string(5, v)?;
                },
                &Value_oneof_value_type::geo_point_value(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::array_value(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::map_value(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Value {
        Value::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, ::protobuf::well_known_types::NullValue>(
                    "null_value",
                    Value::has_null_value,
                    Value::get_null_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "boolean_value",
                    Value::has_boolean_value,
                    Value::get_boolean_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "integer_value",
                    Value::has_integer_value,
                    Value::get_integer_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                    "double_value",
                    Value::has_double_value,
                    Value::get_double_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Timestamp>(
                    "timestamp_value",
                    Value::has_timestamp_value,
                    Value::get_timestamp_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "string_value",
                    Value::has_string_value,
                    Value::get_string_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "bytes_value",
                    Value::has_bytes_value,
                    Value::get_bytes_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "reference_value",
                    Value::has_reference_value,
                    Value::get_reference_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::latlng::LatLng>(
                    "geo_point_value",
                    Value::has_geo_point_value,
                    Value::get_geo_point_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ArrayValue>(
                    "array_value",
                    Value::has_array_value,
                    Value::get_array_value,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MapValue>(
                    "map_value",
                    Value::has_map_value,
                    Value::get_map_value,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Value>(
                    "Value",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Value {
        static mut instance: ::protobuf::lazy::Lazy<Value> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Value,
        };
        unsafe {
            instance.get(Value::new)
        }
    }
}

impl ::protobuf::Clear for Value {
    fn clear(&mut self) {
        self.clear_null_value();
        self.clear_boolean_value();
        self.clear_integer_value();
        self.clear_double_value();
        self.clear_timestamp_value();
        self.clear_string_value();
        self.clear_bytes_value();
        self.clear_reference_value();
        self.clear_geo_point_value();
        self.clear_array_value();
        self.clear_map_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Value {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ArrayValue {
    // message fields
    pub values: ::protobuf::RepeatedField<Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl ArrayValue {
    pub fn new() -> ArrayValue {
        ::std::default::Default::default()
    }

    // repeated .google.firestore.v1beta1.Value values = 1;

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<Value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<Value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<Value> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    pub fn get_values(&self) -> &[Value] {
        &self.values
    }
}

impl ::protobuf::Message for ArrayValue {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ArrayValue {
        ArrayValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Value>>(
                    "values",
                    |m: &ArrayValue| { &m.values },
                    |m: &mut ArrayValue| { &mut m.values },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ArrayValue>(
                    "ArrayValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ArrayValue {
        static mut instance: ::protobuf::lazy::Lazy<ArrayValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ArrayValue,
        };
        unsafe {
            instance.get(ArrayValue::new)
        }
    }
}

impl ::protobuf::Clear for ArrayValue {
    fn clear(&mut self) {
        self.clear_values();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ArrayValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArrayValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MapValue {
    // message fields
    pub fields: ::std::collections::HashMap<::std::string::String, Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl MapValue {
    pub fn new() -> MapValue {
        ::std::default::Default::default()
    }

    // repeated .google.firestore.v1beta1.MapValue.FieldsEntry fields = 1;

    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::std::collections::HashMap<::std::string::String, Value>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Value> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::std::collections::HashMap<::std::string::String, Value> {
        ::std::mem::replace(&mut self.fields, ::std::collections::HashMap::new())
    }

    pub fn get_fields(&self) -> &::std::collections::HashMap<::std::string::String, Value> {
        &self.fields
    }
}

impl ::protobuf::Message for MapValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(wire_type, is, &mut self.fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(1, &self.fields);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(1, &self.fields, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MapValue {
        MapValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(
                    "fields",
                    |m: &MapValue| { &m.fields },
                    |m: &mut MapValue| { &mut m.fields },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MapValue>(
                    "MapValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MapValue {
        static mut instance: ::protobuf::lazy::Lazy<MapValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MapValue,
        };
        unsafe {
            instance.get(MapValue::new)
        }
    }
}

impl ::protobuf::Clear for MapValue {
    fn clear(&mut self) {
        self.clear_fields();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MapValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'google/firestore/v1beta1/document.proto\x12\x18google.firestore.v1bet\
    a1\x1a\x1cgoogle/api/annotations.proto\x1a\x1cgoogle/protobuf/struct.pro\
    to\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x18google/type/latlng.prot\
    o\"\xbc\x02\n\x08Document\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\
    \x12F\n\x06fields\x18\x02\x20\x03(\x0b2..google.firestore.v1beta1.Docume\
    nt.FieldsEntryR\x06fields\x12;\n\x0bcreate_time\x18\x03\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\ncreateTime\x12;\n\x0bupdate_time\x18\
    \x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\nupdateTime\x1aZ\n\x0b\
    FieldsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x125\n\x05value\
    \x18\x02\x20\x01(\x0b2\x1f.google.firestore.v1beta1.ValueR\x05value:\x02\
    8\x01\"\xca\x04\n\x05Value\x12;\n\nnull_value\x18\x0b\x20\x01(\x0e2\x1a.\
    google.protobuf.NullValueH\0R\tnullValue\x12%\n\rboolean_value\x18\x01\
    \x20\x01(\x08H\0R\x0cbooleanValue\x12%\n\rinteger_value\x18\x02\x20\x01(\
    \x03H\0R\x0cintegerValue\x12#\n\x0cdouble_value\x18\x03\x20\x01(\x01H\0R\
    \x0bdoubleValue\x12E\n\x0ftimestamp_value\x18\n\x20\x01(\x0b2\x1a.google\
    .protobuf.TimestampH\0R\x0etimestampValue\x12#\n\x0cstring_value\x18\x11\
    \x20\x01(\tH\0R\x0bstringValue\x12!\n\x0bbytes_value\x18\x12\x20\x01(\
    \x0cH\0R\nbytesValue\x12)\n\x0freference_value\x18\x05\x20\x01(\tH\0R\
    \x0ereferenceValue\x12=\n\x0fgeo_point_value\x18\x08\x20\x01(\x0b2\x13.g\
    oogle.type.LatLngH\0R\rgeoPointValue\x12G\n\x0barray_value\x18\t\x20\x01\
    (\x0b2$.google.firestore.v1beta1.ArrayValueH\0R\narrayValue\x12A\n\tmap_\
    value\x18\x06\x20\x01(\x0b2\".google.firestore.v1beta1.MapValueH\0R\x08m\
    apValueB\x0c\n\nvalue_type\"E\n\nArrayValue\x127\n\x06values\x18\x01\x20\
    \x03(\x0b2\x1f.google.firestore.v1beta1.ValueR\x06values\"\xae\x01\n\x08\
    MapValue\x12F\n\x06fields\x18\x01\x20\x03(\x0b2..google.firestore.v1beta\
    1.MapValue.FieldsEntryR\x06fields\x1aZ\n\x0bFieldsEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x125\n\x05value\x18\x02\x20\x01(\x0b2\x1f.go\
    ogle.firestore.v1beta1.ValueR\x05value:\x028\x01B\xbb\x01\n\x1ccom.googl\
    e.firestore.v1beta1B\rDocumentProtoP\x01ZAgoogle.golang.org/genproto/goo\
    gleapis/firestore/v1beta1;firestore\xa2\x02\x04GCFS\xaa\x02\x1eGoogle.Cl\
    oud.Firestore.V1Beta1\xca\x02\x1eGoogle\\Cloud\\Firestore\\V1beta1J\x87*\
    \n\x07\x12\x05\x0e\0\x95\x01\x01\n\xbc\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xb1\x04\x20Copyright\x202018\x20Google\x20LLC\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\x08\x20\n\t\n\x02\x03\0\x12\x03\x12\x07%\n\t\n\x02\x03\
    \x01\x12\x03\x13\x07%\n\t\n\x02\x03\x02\x12\x03\x14\x07(\n\t\n\x02\x03\
    \x03\x12\x03\x15\x07!\n\x08\n\x01\x08\x12\x03\x17\0;\n\x0b\n\x04\x08\xe7\
    \x07\0\x12\x03\x17\0;\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x17\x07\x17\
    \n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x17\x07\x17\n\x0e\n\x07\x08\xe7\
    \x07\0\x02\0\x01\x12\x03\x17\x07\x17\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\
    \x03\x17\x1a:\n\x08\n\x01\x08\x12\x03\x18\0X\n\x0b\n\x04\x08\xe7\x07\x01\
    \x12\x03\x18\0X\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x18\x07\x11\n\r\
    \n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x18\x07\x11\n\x0e\n\x07\x08\xe7\x07\
    \x01\x02\0\x01\x12\x03\x18\x07\x11\n\x0c\n\x05\x08\xe7\x07\x01\x07\x12\
    \x03\x18\x14W\n\x08\n\x01\x08\x12\x03\x19\0\"\n\x0b\n\x04\x08\xe7\x07\
    \x02\x12\x03\x19\0\"\n\x0c\n\x05\x08\xe7\x07\x02\x02\x12\x03\x19\x07\x1a\
    \n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\x19\x07\x1a\n\x0e\n\x07\x08\xe7\
    \x07\x02\x02\0\x01\x12\x03\x19\x07\x1a\n\x0c\n\x05\x08\xe7\x07\x02\x03\
    \x12\x03\x19\x1d!\n\x08\n\x01\x08\x12\x03\x1a\0.\n\x0b\n\x04\x08\xe7\x07\
    \x03\x12\x03\x1a\0.\n\x0c\n\x05\x08\xe7\x07\x03\x02\x12\x03\x1a\x07\x1b\
    \n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\x1a\x07\x1b\n\x0e\n\x07\x08\xe7\
    \x07\x03\x02\0\x01\x12\x03\x1a\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x03\x07\
    \x12\x03\x1a\x1e-\n\x08\n\x01\x08\x12\x03\x1b\05\n\x0b\n\x04\x08\xe7\x07\
    \x04\x12\x03\x1b\05\n\x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\x1b\x07\x13\
    \n\r\n\x06\x08\xe7\x07\x04\x02\0\x12\x03\x1b\x07\x13\n\x0e\n\x07\x08\xe7\
    \x07\x04\x02\0\x01\x12\x03\x1b\x07\x13\n\x0c\n\x05\x08\xe7\x07\x04\x07\
    \x12\x03\x1b\x164\n\x08\n\x01\x08\x12\x03\x1c\0\"\n\x0b\n\x04\x08\xe7\
    \x07\x05\x12\x03\x1c\0\"\n\x0c\n\x05\x08\xe7\x07\x05\x02\x12\x03\x1c\x07\
    \x18\n\r\n\x06\x08\xe7\x07\x05\x02\0\x12\x03\x1c\x07\x18\n\x0e\n\x07\x08\
    \xe7\x07\x05\x02\0\x01\x12\x03\x1c\x07\x18\n\x0c\n\x05\x08\xe7\x07\x05\
    \x07\x12\x03\x1c\x1b!\n\x08\n\x01\x08\x12\x03\x1d\0;\n\x0b\n\x04\x08\xe7\
    \x07\x06\x12\x03\x1d\0;\n\x0c\n\x05\x08\xe7\x07\x06\x02\x12\x03\x1d\x07\
    \x14\n\r\n\x06\x08\xe7\x07\x06\x02\0\x12\x03\x1d\x07\x14\n\x0e\n\x07\x08\
    \xe7\x07\x06\x02\0\x01\x12\x03\x1d\x07\x14\n\x0c\n\x05\x08\xe7\x07\x06\
    \x07\x12\x03\x1d\x17:\nF\n\x02\x04\0\x12\x04#\0O\x01\x1a:\x20A\x20Firest\
    ore\x20document.\n\n\x20Must\x20not\x20exceed\x201\x20MiB\x20-\x204\x20b\
    ytes.\n\n\n\n\x03\x04\0\x01\x12\x03#\x08\x10\n\x89\x01\n\x04\x04\0\x02\0\
    \x12\x03&\x02\x12\x1a|\x20The\x20resource\x20name\x20of\x20the\x20docume\
    nt,\x20for\x20example\n\x20`projects/{project_id}/databases/{database_id\
    }/documents/{document_path}`.\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04&\x02#\
    \x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03&\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03&\x10\x11\n\xc0\
    \x08\n\x04\x04\0\x02\x01\x12\x03@\x02\x20\x1a\xb2\x08\x20The\x20document\
    's\x20fields.\n\n\x20The\x20map\x20keys\x20represent\x20field\x20names.\
    \n\n\x20A\x20simple\x20field\x20name\x20contains\x20only\x20characters\
    \x20`a`\x20to\x20`z`,\x20`A`\x20to\x20`Z`,\n\x20`0`\x20to\x20`9`,\x20or\
    \x20`_`,\x20and\x20must\x20not\x20start\x20with\x20`0`\x20to\x20`9`.\x20\
    For\x20example,\n\x20`foo_bar_17`.\n\n\x20Field\x20names\x20matching\x20\
    the\x20regular\x20expression\x20`__.*__`\x20are\x20reserved.\x20Reserved\
    \n\x20field\x20names\x20are\x20forbidden\x20except\x20in\x20certain\x20d\
    ocumented\x20contexts.\x20The\x20map\n\x20keys,\x20represented\x20as\x20\
    UTF-8,\x20must\x20not\x20exceed\x201,500\x20bytes\x20and\x20cannot\x20be\
    \n\x20empty.\n\n\x20Field\x20paths\x20may\x20be\x20used\x20in\x20other\
    \x20contexts\x20to\x20refer\x20to\x20structured\x20fields\n\x20defined\
    \x20here.\x20For\x20`map_value`,\x20the\x20field\x20path\x20is\x20repres\
    ented\x20by\x20the\x20simple\n\x20or\x20quoted\x20field\x20names\x20of\
    \x20the\x20containing\x20fields,\x20delimited\x20by\x20`.`.\x20For\n\x20\
    example,\x20the\x20structured\x20field\n\x20`\"foo\"\x20:\x20{\x20map_va\
    lue:\x20{\x20\"x&y\"\x20:\x20{\x20string_value:\x20\"hello\"\x20}}}`\x20\
    would\x20be\n\x20represented\x20by\x20the\x20field\x20path\x20`foo.x&y`.\
    \n\n\x20Within\x20a\x20field\x20path,\x20a\x20quoted\x20field\x20name\
    \x20starts\x20and\x20ends\x20with\x20``\x20`\x20``\x20and\n\x20may\x20co\
    ntain\x20any\x20character.\x20Some\x20characters,\x20including\x20``\x20\
    `\x20``,\x20must\x20be\n\x20escaped\x20using\x20a\x20`\\`.\x20For\x20exa\
    mple,\x20``\x20`x&y`\x20``\x20represents\x20`x&y`\x20and\n\x20``\x20`bak\
    \\`tik`\x20``\x20represents\x20``\x20bak`tik\x20``.\n\n\r\n\x05\x04\0\
    \x02\x01\x04\x12\x04@\x02&\x12\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03@\
    \x02\x14\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03@\x15\x1b\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03@\x1e\x1f\n\xf1\x01\n\x04\x04\0\x02\x02\x12\x03G\
    \x02,\x1a\xe3\x01\x20Output\x20only.\x20The\x20time\x20at\x20which\x20th\
    e\x20document\x20was\x20created.\n\n\x20This\x20value\x20increases\x20mo\
    notonically\x20when\x20a\x20document\x20is\x20deleted\x20then\n\x20recre\
    ated.\x20It\x20can\x20also\x20be\x20compared\x20to\x20values\x20from\x20\
    other\x20documents\x20and\n\x20the\x20`read_time`\x20of\x20a\x20query.\n\
    \n\r\n\x05\x04\0\x02\x02\x04\x12\x04G\x02@\x20\n\x0c\n\x05\x04\0\x02\x02\
    \x06\x12\x03G\x02\x1b\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03G\x1c'\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03G*+\n\x98\x02\n\x04\x04\0\x02\x03\x12\
    \x03N\x02,\x1a\x8a\x02\x20Output\x20only.\x20The\x20time\x20at\x20which\
    \x20the\x20document\x20was\x20last\x20changed.\n\n\x20This\x20value\x20i\
    s\x20initially\x20set\x20to\x20the\x20`create_time`\x20then\x20increases\
    \n\x20monotonically\x20with\x20each\x20change\x20to\x20the\x20document.\
    \x20It\x20can\x20also\x20be\n\x20compared\x20to\x20values\x20from\x20oth\
    er\x20documents\x20and\x20the\x20`read_time`\x20of\x20a\x20query.\n\n\r\
    \n\x05\x04\0\x02\x03\x04\x12\x04N\x02G,\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03N\x02\x1b\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03N\x1c'\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03N*+\nH\n\x02\x04\x01\x12\x05R\0\x84\x01\
    \x01\x1a;\x20A\x20message\x20that\x20can\x20hold\x20any\x20of\x20the\x20\
    supported\x20value\x20types.\n\n\n\n\x03\x04\x01\x01\x12\x03R\x08\r\n'\n\
    \x04\x04\x01\x08\0\x12\x05T\x02\x83\x01\x03\x1a\x18\x20Must\x20have\x20a\
    \x20value\x20set.\n\n\x0c\n\x05\x04\x01\x08\0\x01\x12\x03T\x08\x12\n\x1c\
    \n\x04\x04\x01\x02\0\x12\x03V\x04.\x1a\x0f\x20A\x20null\x20value.\n\n\
    \x0c\n\x05\x04\x01\x02\0\x06\x12\x03V\x04\x1d\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03V\x1e(\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03V+-\n\x1f\n\x04\
    \x04\x01\x02\x01\x12\x03Y\x04\x1b\x1a\x12\x20A\x20boolean\x20value.\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03Y\x04\x08\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03Y\t\x16\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03Y\x19\x1a\
    \n\x20\n\x04\x04\x01\x02\x02\x12\x03\\\x04\x1c\x1a\x13\x20An\x20integer\
    \x20value.\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\\\x04\t\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\\\n\x17\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\
    \x03\\\x1a\x1b\n\x1e\n\x04\x04\x01\x02\x03\x12\x03_\x04\x1c\x1a\x11\x20A\
    \x20double\x20value.\n\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03_\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x03\x01\x12\x03_\x0b\x17\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03_\x1a\x1b\ny\n\x04\x04\x01\x02\x04\x12\x03e\x043\x1al\
    \x20A\x20timestamp\x20value.\n\n\x20Precise\x20only\x20to\x20microsecond\
    s.\x20When\x20stored,\x20any\x20additional\x20precision\x20is\n\x20round\
    ed\x20down.\n\n\x0c\n\x05\x04\x01\x02\x04\x06\x12\x03e\x04\x1d\n\x0c\n\
    \x05\x04\x01\x02\x04\x01\x12\x03e\x1e-\n\x0c\n\x05\x04\x01\x02\x04\x03\
    \x12\x03e02\n\xb9\x01\n\x04\x04\x01\x02\x05\x12\x03l\x04\x1d\x1a\xab\x01\
    \x20A\x20string\x20value.\n\n\x20The\x20string,\x20represented\x20as\x20\
    UTF-8,\x20must\x20not\x20exceed\x201\x20MiB\x20-\x2089\x20bytes.\n\x20On\
    ly\x20the\x20first\x201,500\x20bytes\x20of\x20the\x20UTF-8\x20representa\
    tion\x20are\x20considered\x20by\n\x20queries.\n\n\x0c\n\x05\x04\x01\x02\
    \x05\x05\x12\x03l\x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03l\x0b\x17\
    \n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x03l\x1a\x1c\nx\n\x04\x04\x01\x02\
    \x06\x12\x03r\x04\x1b\x1ak\x20A\x20bytes\x20value.\n\n\x20Must\x20not\
    \x20exceed\x201\x20MiB\x20-\x2089\x20bytes.\n\x20Only\x20the\x20first\
    \x201,500\x20bytes\x20are\x20considered\x20by\x20queries.\n\n\x0c\n\x05\
    \x04\x01\x02\x06\x05\x12\x03r\x04\t\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\
    \x03r\n\x15\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\x03r\x18\x1a\n\x82\x01\n\
    \x04\x04\x01\x02\x07\x12\x03v\x04\x1f\x1au\x20A\x20reference\x20to\x20a\
    \x20document.\x20For\x20example:\n\x20`projects/{project_id}/databases/{\
    database_id}/documents/{document_path}`.\n\n\x0c\n\x05\x04\x01\x02\x07\
    \x05\x12\x03v\x04\n\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x03v\x0b\x1a\n\
    \x0c\n\x05\x04\x01\x02\x07\x03\x12\x03v\x1d\x1e\nN\n\x04\x04\x01\x02\x08\
    \x12\x03y\x04+\x1aA\x20A\x20geo\x20point\x20value\x20representing\x20a\
    \x20point\x20on\x20the\x20surface\x20of\x20Earth.\n\n\x0c\n\x05\x04\x01\
    \x02\x08\x06\x12\x03y\x04\x16\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03y\
    \x17&\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03y)*\n\x86\x01\n\x04\x04\x01\
    \x02\t\x12\x03\x7f\x04\x1f\x1ay\x20An\x20array\x20value.\n\n\x20Cannot\
    \x20directly\x20contain\x20another\x20array\x20value,\x20though\x20can\
    \x20contain\x20an\n\x20map\x20which\x20contains\x20another\x20array.\n\n\
    \x0c\n\x05\x04\x01\x02\t\x06\x12\x03\x7f\x04\x0e\n\x0c\n\x05\x04\x01\x02\
    \t\x01\x12\x03\x7f\x0f\x1a\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03\x7f\x1d\
    \x1e\n\x1c\n\x04\x04\x01\x02\n\x12\x04\x82\x01\x04\x1b\x1a\x0e\x20A\x20m\
    ap\x20value.\n\n\r\n\x05\x04\x01\x02\n\x06\x12\x04\x82\x01\x04\x0c\n\r\n\
    \x05\x04\x01\x02\n\x01\x12\x04\x82\x01\r\x16\n\r\n\x05\x04\x01\x02\n\x03\
    \x12\x04\x82\x01\x19\x1a\n\x1f\n\x02\x04\x02\x12\x06\x87\x01\0\x8a\x01\
    \x01\x1a\x11\x20An\x20array\x20value.\n\n\x0b\n\x03\x04\x02\x01\x12\x04\
    \x87\x01\x08\x12\n$\n\x04\x04\x02\x02\0\x12\x04\x89\x01\x02\x1c\x1a\x16\
    \x20Values\x20in\x20the\x20array.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\
    \x89\x01\x02\n\n\r\n\x05\x04\x02\x02\0\x06\x12\x04\x89\x01\x0b\x10\n\r\n\
    \x05\x04\x02\x02\0\x01\x12\x04\x89\x01\x11\x17\n\r\n\x05\x04\x02\x02\0\
    \x03\x12\x04\x89\x01\x1a\x1b\n\x1c\n\x02\x04\x03\x12\x06\x8d\x01\0\x95\
    \x01\x01\x1a\x0e\x20A\x20map\x20value.\n\n\x0b\n\x03\x04\x03\x01\x12\x04\
    \x8d\x01\x08\x10\n\xad\x02\n\x04\x04\x03\x02\0\x12\x04\x94\x01\x02\x20\
    \x1a\x9e\x02\x20The\x20map's\x20fields.\n\n\x20The\x20map\x20keys\x20rep\
    resent\x20field\x20names.\x20Field\x20names\x20matching\x20the\x20regula\
    r\n\x20expression\x20`__.*__`\x20are\x20reserved.\x20Reserved\x20field\
    \x20names\x20are\x20forbidden\x20except\n\x20in\x20certain\x20documented\
    \x20contexts.\x20The\x20map\x20keys,\x20represented\x20as\x20UTF-8,\x20m\
    ust\n\x20not\x20exceed\x201,500\x20bytes\x20and\x20cannot\x20be\x20empty\
    .\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\x94\x01\x02\x8d\x01\x12\n\r\n\
    \x05\x04\x03\x02\0\x06\x12\x04\x94\x01\x02\x14\n\r\n\x05\x04\x03\x02\0\
    \x01\x12\x04\x94\x01\x15\x1b\n\r\n\x05\x04\x03\x02\0\x03\x12\x04\x94\x01\
    \x1e\x1fb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
