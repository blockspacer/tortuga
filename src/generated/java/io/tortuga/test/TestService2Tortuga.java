// This file is autogenerated by the Tortuga compiler, DO NOT EDIT MANUALLY

package io.tortuga.test;

import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;

import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import io.tortuga.Service;
import io.tortuga.TaskHandlerRegistry;
import io.tortuga.TaskResult;
import io.tortuga.TaskSpec;
import io.tortuga.TortugaConnection;
import io.tortuga.TortugaContext;

import java.util.concurrent.TimeUnit;

@javax.annotation.Generated("tortuga")
public class TestService2Tortuga {
  public static class ImplBase extends Service {
    public ListenableFuture<Status> handleTask2(com.google.protobuf.StringValue t, TortugaContext ctx) {
      return Futures.immediateFuture(Status.UNIMPLEMENTED);
    }

    public ListenableFuture<Status> handleCustomMessage2(io.tortuga.test.TortugaProto.TestMessage t, TortugaContext ctx) {
      return Futures.immediateFuture(Status.UNIMPLEMENTED);
    }

    private ListenableFuture<Status> do_handleTask2Impl(com.google.protobuf.Any data, TortugaContext ctx) {
      try {
        com.google.protobuf.StringValue t = data.unpack(com.google.protobuf.StringValue.class);
        return handleTask2(t, ctx);
      } catch (com.google.protobuf.InvalidProtocolBufferException ex) {
        Status status = Status.fromThrowable(ex);
        return Futures.immediateFuture(status);
      }
    }

    private ListenableFuture<Status> do_handleCustomMessage2Impl(com.google.protobuf.Any data, TortugaContext ctx) {
      try {
        io.tortuga.test.TortugaProto.TestMessage t = data.unpack(io.tortuga.test.TortugaProto.TestMessage.class);
        return handleCustomMessage2(t, ctx);
      } catch (com.google.protobuf.InvalidProtocolBufferException ex) {
        Status status = Status.fromThrowable(ex);
        return Futures.immediateFuture(status);
      }
    }


    @Override
    public final void register(TaskHandlerRegistry registry) {
      registry.registerHandler("tortuga.test.TestService2.HandleTask2", this::do_handleTask2Impl);
      registry.registerHandler("tortuga.test.TestService2.HandleCustomMessage2", this::do_handleCustomMessage2Impl);
    }
  }
  public static class GrpcBridgingService extends Service {
    private final io.grpc.Channel chan;

    public GrpcBridgingService(io.grpc.Channel chan) {
      this.chan = chan;
    }

    private ListenableFuture<Status> do_handleTask2Impl(com.google.protobuf.Any data, TortugaContext ctx) {
      com.google.protobuf.StringValue t = null;
      try {
        t = data.unpack(com.google.protobuf.StringValue.class);
      } catch (com.google.protobuf.InvalidProtocolBufferException ex) {
        Status status = Status.fromThrowable(ex);
        return Futures.immediateFuture(status);
      }
      io.tortuga.test.TestService2Grpc.TestService2BlockingStub stub = io.tortuga.test.TestService2Grpc.newBlockingStub(this.chan);
      stub = stub.withDeadlineAfter(30, TimeUnit.SECONDS);
      try {
        stub.handleTask2(t);
        return Futures.immediateFuture(Status.OK);
      } catch (StatusRuntimeException ex) {
        return Futures.immediateFuture(ex.getStatus());
      }
    }

    private ListenableFuture<Status> do_handleCustomMessage2Impl(com.google.protobuf.Any data, TortugaContext ctx) {
      io.tortuga.test.TortugaProto.TestMessage t = null;
      try {
        t = data.unpack(io.tortuga.test.TortugaProto.TestMessage.class);
      } catch (com.google.protobuf.InvalidProtocolBufferException ex) {
        Status status = Status.fromThrowable(ex);
        return Futures.immediateFuture(status);
      }
      io.tortuga.test.TestService2Grpc.TestService2BlockingStub stub = io.tortuga.test.TestService2Grpc.newBlockingStub(this.chan);
      stub = stub.withDeadlineAfter(30, TimeUnit.SECONDS);
      try {
        io.tortuga.TortugaParamsProto.TortugaOutput output = stub.handleCustomMessage2(t);
        ctx.setOutput(output.getOutput());
        return Futures.immediateFuture(Status.OK);
      } catch (StatusRuntimeException ex) {
        return Futures.immediateFuture(ex.getStatus());
      }
    }


    @Override
    public final void register(TaskHandlerRegistry registry) {
      registry.registerHandler("tortuga.test.TestService2.HandleTask2", this::do_handleTask2Impl);
      registry.registerHandler("tortuga.test.TestService2.HandleCustomMessage2", this::do_handleCustomMessage2Impl);
    }
  }
  
  public static final class Publisher {
    private final TortugaConnection conn;

    private Publisher(TortugaConnection conn) {
      this.conn = conn;
    }

    public TaskResult publishHandleTask2Task(TaskSpec spec, com.google.protobuf.StringValue t) {
      com.google.protobuf.Any data = com.google.protobuf.Any.pack(t);
      return conn.publishTask("tortuga.test.TestService2.HandleTask2", spec, data);
    }

    public TaskResult publishHandleCustomMessage2Task(TaskSpec spec, io.tortuga.test.TortugaProto.TestMessage t) {
      com.google.protobuf.Any data = com.google.protobuf.Any.pack(t);
      return conn.publishTask("tortuga.test.TestService2.HandleCustomMessage2", spec, data);
    }

  }

  public static final class AsyncPublisher {
    private final TortugaConnection conn;

    private AsyncPublisher(TortugaConnection conn) {
      this.conn = conn;
    }

    public ListenableFuture<TaskResult> publishHandleTask2Task(TaskSpec spec, com.google.protobuf.StringValue t) {
      com.google.protobuf.Any data = com.google.protobuf.Any.pack(t);
      return conn.publishTaskAsync("tortuga.test.TestService2.HandleTask2", spec, data);
    }

    public ListenableFuture<TaskResult> publishHandleCustomMessage2Task(TaskSpec spec, io.tortuga.test.TortugaProto.TestMessage t) {
      com.google.protobuf.Any data = com.google.protobuf.Any.pack(t);
      return conn.publishTaskAsync("tortuga.test.TestService2.HandleCustomMessage2", spec, data);
    }

  }

  public static final class TaskManager {
    private final TortugaConnection conn;

    private TaskManager(TortugaConnection conn) {
      this.conn = conn;
    }

    public java.util.Optional<io.tortuga.TaskWatcher> findHandleTask2Task(String id) {
      return conn.createWatcher(id, "tortuga.test.TestService2.HandleTask2");
    }

    public java.util.Optional<io.tortuga.TaskWatcher> findHandleCustomMessage2Task(String id) {
      return conn.createWatcher(id, "tortuga.test.TestService2.HandleCustomMessage2");
    }


    public ListenableFuture<java.util.Optional<io.tortuga.TaskWatcher>> findAsyncHandleTask2Task(String id) {
      return conn.createWatcherAsync(id, "tortuga.test.TestService2.HandleTask2");
    }

    public ListenableFuture<java.util.Optional<io.tortuga.TaskWatcher>> findAsyncHandleCustomMessage2Task(String id) {
      return conn.createWatcherAsync(id, "tortuga.test.TestService2.HandleCustomMessage2");
    }

  }

  public static Publisher newPublisher(TortugaConnection conn) {
    return new Publisher(conn);
  }

  public static AsyncPublisher newAsyncPublisher(TortugaConnection conn) {
    return new AsyncPublisher(conn);
  }

  public static TaskManager newTaskManager(TortugaConnection conn) {
    return new TaskManager(conn);
  }
}
